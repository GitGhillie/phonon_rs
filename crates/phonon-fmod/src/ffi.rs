/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

pub const FMOD_VERSION: u32 = 131609;
pub const FMOD_DEBUG_LEVEL_NONE: u32 = 0;
pub const FMOD_DEBUG_LEVEL_ERROR: u32 = 1;
pub const FMOD_DEBUG_LEVEL_WARNING: u32 = 2;
pub const FMOD_DEBUG_LEVEL_LOG: u32 = 4;
pub const FMOD_DEBUG_TYPE_MEMORY: u32 = 256;
pub const FMOD_DEBUG_TYPE_FILE: u32 = 512;
pub const FMOD_DEBUG_TYPE_CODEC: u32 = 1024;
pub const FMOD_DEBUG_TYPE_TRACE: u32 = 2048;
pub const FMOD_DEBUG_DISPLAY_TIMESTAMPS: u32 = 65536;
pub const FMOD_DEBUG_DISPLAY_LINENUMBERS: u32 = 131072;
pub const FMOD_DEBUG_DISPLAY_THREAD: u32 = 262144;
pub const FMOD_MEMORY_NORMAL: u32 = 0;
pub const FMOD_MEMORY_STREAM_FILE: u32 = 1;
pub const FMOD_MEMORY_STREAM_DECODE: u32 = 2;
pub const FMOD_MEMORY_SAMPLEDATA: u32 = 4;
pub const FMOD_MEMORY_DSP_BUFFER: u32 = 8;
pub const FMOD_MEMORY_PLUGIN: u32 = 16;
pub const FMOD_MEMORY_PERSISTENT: u32 = 2097152;
pub const FMOD_MEMORY_ALL: u32 = 4294967295;
pub const FMOD_INIT_NORMAL: u32 = 0;
pub const FMOD_INIT_STREAM_FROM_UPDATE: u32 = 1;
pub const FMOD_INIT_MIX_FROM_UPDATE: u32 = 2;
pub const FMOD_INIT_3D_RIGHTHANDED: u32 = 4;
pub const FMOD_INIT_CLIP_OUTPUT: u32 = 8;
pub const FMOD_INIT_CHANNEL_LOWPASS: u32 = 256;
pub const FMOD_INIT_CHANNEL_DISTANCEFILTER: u32 = 512;
pub const FMOD_INIT_PROFILE_ENABLE: u32 = 65536;
pub const FMOD_INIT_VOL0_BECOMES_VIRTUAL: u32 = 131072;
pub const FMOD_INIT_GEOMETRY_USECLOSEST: u32 = 262144;
pub const FMOD_INIT_PREFER_DOLBY_DOWNMIX: u32 = 524288;
pub const FMOD_INIT_THREAD_UNSAFE: u32 = 1048576;
pub const FMOD_INIT_PROFILE_METER_ALL: u32 = 2097152;
pub const FMOD_INIT_MEMORY_TRACKING: u32 = 4194304;
pub const FMOD_DRIVER_STATE_CONNECTED: u32 = 1;
pub const FMOD_DRIVER_STATE_DEFAULT: u32 = 2;
pub const FMOD_TIMEUNIT_MS: u32 = 1;
pub const FMOD_TIMEUNIT_PCM: u32 = 2;
pub const FMOD_TIMEUNIT_PCMBYTES: u32 = 4;
pub const FMOD_TIMEUNIT_RAWBYTES: u32 = 8;
pub const FMOD_TIMEUNIT_PCMFRACTION: u32 = 16;
pub const FMOD_TIMEUNIT_MODORDER: u32 = 256;
pub const FMOD_TIMEUNIT_MODROW: u32 = 512;
pub const FMOD_TIMEUNIT_MODPATTERN: u32 = 1024;
pub const FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED: u32 = 1;
pub const FMOD_SYSTEM_CALLBACK_DEVICELOST: u32 = 2;
pub const FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED: u32 = 4;
pub const FMOD_SYSTEM_CALLBACK_THREADCREATED: u32 = 8;
pub const FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION: u32 = 16;
pub const FMOD_SYSTEM_CALLBACK_PREMIX: u32 = 32;
pub const FMOD_SYSTEM_CALLBACK_POSTMIX: u32 = 64;
pub const FMOD_SYSTEM_CALLBACK_ERROR: u32 = 128;
pub const FMOD_SYSTEM_CALLBACK_MIDMIX: u32 = 256;
pub const FMOD_SYSTEM_CALLBACK_THREADDESTROYED: u32 = 512;
pub const FMOD_SYSTEM_CALLBACK_PREUPDATE: u32 = 1024;
pub const FMOD_SYSTEM_CALLBACK_POSTUPDATE: u32 = 2048;
pub const FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED: u32 = 4096;
pub const FMOD_SYSTEM_CALLBACK_BUFFEREDNOMIX: u32 = 8192;
pub const FMOD_SYSTEM_CALLBACK_DEVICEREINITIALIZE: u32 = 16384;
pub const FMOD_SYSTEM_CALLBACK_OUTPUTUNDERRUN: u32 = 32768;
pub const FMOD_SYSTEM_CALLBACK_RECORDPOSITIONCHANGED: u32 = 65536;
pub const FMOD_SYSTEM_CALLBACK_ALL: u32 = 4294967295;
pub const FMOD_DEFAULT: u32 = 0;
pub const FMOD_LOOP_OFF: u32 = 1;
pub const FMOD_LOOP_NORMAL: u32 = 2;
pub const FMOD_LOOP_BIDI: u32 = 4;
pub const FMOD_2D: u32 = 8;
pub const FMOD_3D: u32 = 16;
pub const FMOD_CREATESTREAM: u32 = 128;
pub const FMOD_CREATESAMPLE: u32 = 256;
pub const FMOD_CREATECOMPRESSEDSAMPLE: u32 = 512;
pub const FMOD_OPENUSER: u32 = 1024;
pub const FMOD_OPENMEMORY: u32 = 2048;
pub const FMOD_OPENMEMORY_POINT: u32 = 268435456;
pub const FMOD_OPENRAW: u32 = 4096;
pub const FMOD_OPENONLY: u32 = 8192;
pub const FMOD_ACCURATETIME: u32 = 16384;
pub const FMOD_MPEGSEARCH: u32 = 32768;
pub const FMOD_NONBLOCKING: u32 = 65536;
pub const FMOD_UNIQUE: u32 = 131072;
pub const FMOD_3D_HEADRELATIVE: u32 = 262144;
pub const FMOD_3D_WORLDRELATIVE: u32 = 524288;
pub const FMOD_3D_INVERSEROLLOFF: u32 = 1048576;
pub const FMOD_3D_LINEARROLLOFF: u32 = 2097152;
pub const FMOD_3D_LINEARSQUAREROLLOFF: u32 = 4194304;
pub const FMOD_3D_INVERSETAPEREDROLLOFF: u32 = 8388608;
pub const FMOD_3D_CUSTOMROLLOFF: u32 = 67108864;
pub const FMOD_3D_IGNOREGEOMETRY: u32 = 1073741824;
pub const FMOD_IGNORETAGS: u32 = 33554432;
pub const FMOD_LOWMEM: u32 = 134217728;
pub const FMOD_VIRTUAL_PLAYFROMSTART: u32 = 2147483648;
pub const FMOD_CHANNELMASK_FRONT_LEFT: u32 = 1;
pub const FMOD_CHANNELMASK_FRONT_RIGHT: u32 = 2;
pub const FMOD_CHANNELMASK_FRONT_CENTER: u32 = 4;
pub const FMOD_CHANNELMASK_LOW_FREQUENCY: u32 = 8;
pub const FMOD_CHANNELMASK_SURROUND_LEFT: u32 = 16;
pub const FMOD_CHANNELMASK_SURROUND_RIGHT: u32 = 32;
pub const FMOD_CHANNELMASK_BACK_LEFT: u32 = 64;
pub const FMOD_CHANNELMASK_BACK_RIGHT: u32 = 128;
pub const FMOD_CHANNELMASK_BACK_CENTER: u32 = 256;
pub const FMOD_CHANNELMASK_MONO: u32 = 1;
pub const FMOD_CHANNELMASK_STEREO: u32 = 3;
pub const FMOD_CHANNELMASK_LRC: u32 = 7;
pub const FMOD_CHANNELMASK_QUAD: u32 = 51;
pub const FMOD_CHANNELMASK_SURROUND: u32 = 55;
pub const FMOD_CHANNELMASK_5POINT1: u32 = 63;
pub const FMOD_CHANNELMASK_5POINT1_REARS: u32 = 207;
pub const FMOD_CHANNELMASK_7POINT0: u32 = 247;
pub const FMOD_CHANNELMASK_7POINT1: u32 = 255;
pub const FMOD_PORT_INDEX_NONE: i32 = -1;
pub const FMOD_PORT_INDEX_FLAG_VR_CONTROLLER: u64 = 1152921504606846976;
pub const FMOD_THREAD_PRIORITY_PLATFORM_MIN: i32 = -32768;
pub const FMOD_THREAD_PRIORITY_PLATFORM_MAX: u32 = 32768;
pub const FMOD_THREAD_PRIORITY_DEFAULT: i32 = -32769;
pub const FMOD_THREAD_PRIORITY_LOW: i32 = -32770;
pub const FMOD_THREAD_PRIORITY_MEDIUM: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_HIGH: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_VERY_HIGH: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_EXTREME: i32 = -32774;
pub const FMOD_THREAD_PRIORITY_CRITICAL: i32 = -32775;
pub const FMOD_THREAD_PRIORITY_MIXER: i32 = -32774;
pub const FMOD_THREAD_PRIORITY_FEEDER: i32 = -32775;
pub const FMOD_THREAD_PRIORITY_STREAM: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_FILE: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_NONBLOCKING: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_RECORD: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_GEOMETRY: i32 = -32770;
pub const FMOD_THREAD_PRIORITY_PROFILER: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_UPDATE: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION1: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION2: i32 = -32773;
pub const FMOD_THREAD_STACK_SIZE_DEFAULT: u32 = 0;
pub const FMOD_THREAD_STACK_SIZE_MIXER: u32 = 81920;
pub const FMOD_THREAD_STACK_SIZE_FEEDER: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_STREAM: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_FILE: u32 = 65536;
pub const FMOD_THREAD_STACK_SIZE_NONBLOCKING: u32 = 114688;
pub const FMOD_THREAD_STACK_SIZE_RECORD: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_GEOMETRY: u32 = 49152;
pub const FMOD_THREAD_STACK_SIZE_PROFILER: u32 = 131072;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION1: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION2: u32 = 16384;
pub const FMOD_THREAD_AFFINITY_GROUP_DEFAULT: u64 = 4611686018427387904;
pub const FMOD_THREAD_AFFINITY_GROUP_A: u64 = 4611686018427387905;
pub const FMOD_THREAD_AFFINITY_GROUP_B: u64 = 4611686018427387906;
pub const FMOD_THREAD_AFFINITY_GROUP_C: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_MIXER: u64 = 4611686018427387905;
pub const FMOD_THREAD_AFFINITY_FEEDER: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_STREAM: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_FILE: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_NONBLOCKING: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_RECORD: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_GEOMETRY: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_PROFILER: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_STUDIO_UPDATE: u64 = 4611686018427387906;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION1: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION2: u64 = 4611686018427387907;
pub const FMOD_THREAD_AFFINITY_CORE_ALL: u32 = 0;
pub const FMOD_THREAD_AFFINITY_CORE_0: u32 = 1;
pub const FMOD_THREAD_AFFINITY_CORE_1: u32 = 2;
pub const FMOD_THREAD_AFFINITY_CORE_2: u32 = 4;
pub const FMOD_THREAD_AFFINITY_CORE_3: u32 = 8;
pub const FMOD_THREAD_AFFINITY_CORE_4: u32 = 16;
pub const FMOD_THREAD_AFFINITY_CORE_5: u32 = 32;
pub const FMOD_THREAD_AFFINITY_CORE_6: u32 = 64;
pub const FMOD_THREAD_AFFINITY_CORE_7: u32 = 128;
pub const FMOD_THREAD_AFFINITY_CORE_8: u32 = 256;
pub const FMOD_THREAD_AFFINITY_CORE_9: u32 = 512;
pub const FMOD_THREAD_AFFINITY_CORE_10: u32 = 1024;
pub const FMOD_THREAD_AFFINITY_CORE_11: u32 = 2048;
pub const FMOD_THREAD_AFFINITY_CORE_12: u32 = 4096;
pub const FMOD_THREAD_AFFINITY_CORE_13: u32 = 8192;
pub const FMOD_THREAD_AFFINITY_CORE_14: u32 = 16384;
pub const FMOD_THREAD_AFFINITY_CORE_15: u32 = 32768;
pub const FMOD_MAX_CHANNEL_WIDTH: u32 = 32;
pub const FMOD_MAX_SYSTEMS: u32 = 8;
pub const FMOD_MAX_LISTENERS: u32 = 8;
pub const FMOD_REVERB_MAXINSTANCES: u32 = 4;
pub const FMOD_CODEC_PLUGIN_VERSION: u32 = 1;
pub const FMOD_CODEC_SEEK_METHOD_SET: u32 = 0;
pub const FMOD_CODEC_SEEK_METHOD_CURRENT: u32 = 1;
pub const FMOD_CODEC_SEEK_METHOD_END: u32 = 2;
pub const FMOD_DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES: u32 = 66;
pub const FMOD_PLUGIN_SDK_VERSION: u32 = 110;
pub const FMOD_DSP_GETPARAM_VALUESTR_LENGTH: u32 = 32;
pub const FMOD_OUTPUT_PLUGIN_VERSION: u32 = 5;
pub const FMOD_OUTPUT_METHOD_MIX_DIRECT: u32 = 0;
pub const FMOD_OUTPUT_METHOD_MIX_BUFFERED: u32 = 1;
pub type FMOD_BOOL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYSTEM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUND {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNELCONTROL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNEL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNELGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUNDGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB3D {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSPCONNECTION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_POLYGON {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_GEOMETRY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYNCPOINT {
    _unused: [u8; 0],
}
pub type FMOD_DEBUG_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_MEMORY_TYPE = ::std::os::raw::c_uint;
pub type FMOD_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_DRIVER_STATE = ::std::os::raw::c_uint;
pub type FMOD_TIMEUNIT = ::std::os::raw::c_uint;
pub type FMOD_SYSTEM_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_MODE = ::std::os::raw::c_uint;
pub type FMOD_CHANNELMASK = ::std::os::raw::c_uint;
pub type FMOD_PORT_INDEX = ::std::os::raw::c_ulonglong;
pub type FMOD_THREAD_PRIORITY = ::std::os::raw::c_int;
pub type FMOD_THREAD_STACK_SIZE = ::std::os::raw::c_uint;
pub type FMOD_THREAD_AFFINITY = ::std::os::raw::c_longlong;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_MIXER: FMOD_THREAD_TYPE = 0;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_FEEDER: FMOD_THREAD_TYPE = 1;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_STREAM: FMOD_THREAD_TYPE = 2;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_FILE: FMOD_THREAD_TYPE = 3;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_NONBLOCKING: FMOD_THREAD_TYPE = 4;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_RECORD: FMOD_THREAD_TYPE = 5;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_GEOMETRY: FMOD_THREAD_TYPE = 6;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_PROFILER: FMOD_THREAD_TYPE = 7;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_STUDIO_UPDATE: FMOD_THREAD_TYPE = 8;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_STUDIO_LOAD_BANK: FMOD_THREAD_TYPE = 9;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE: FMOD_THREAD_TYPE = 10;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_CONVOLUTION1: FMOD_THREAD_TYPE = 11;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_CONVOLUTION2: FMOD_THREAD_TYPE = 12;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_MAX: FMOD_THREAD_TYPE = 13;
pub const FMOD_THREAD_TYPE_FMOD_THREAD_TYPE_FORCEINT: FMOD_THREAD_TYPE = 65536;
pub type FMOD_THREAD_TYPE = ::std::os::raw::c_int;
pub const FMOD_RESULT_FMOD_OK: FMOD_RESULT = 0;
pub const FMOD_RESULT_FMOD_ERR_BADCOMMAND: FMOD_RESULT = 1;
pub const FMOD_RESULT_FMOD_ERR_CHANNEL_ALLOC: FMOD_RESULT = 2;
pub const FMOD_RESULT_FMOD_ERR_CHANNEL_STOLEN: FMOD_RESULT = 3;
pub const FMOD_RESULT_FMOD_ERR_DMA: FMOD_RESULT = 4;
pub const FMOD_RESULT_FMOD_ERR_DSP_CONNECTION: FMOD_RESULT = 5;
pub const FMOD_RESULT_FMOD_ERR_DSP_DONTPROCESS: FMOD_RESULT = 6;
pub const FMOD_RESULT_FMOD_ERR_DSP_FORMAT: FMOD_RESULT = 7;
pub const FMOD_RESULT_FMOD_ERR_DSP_INUSE: FMOD_RESULT = 8;
pub const FMOD_RESULT_FMOD_ERR_DSP_NOTFOUND: FMOD_RESULT = 9;
pub const FMOD_RESULT_FMOD_ERR_DSP_RESERVED: FMOD_RESULT = 10;
pub const FMOD_RESULT_FMOD_ERR_DSP_SILENCE: FMOD_RESULT = 11;
pub const FMOD_RESULT_FMOD_ERR_DSP_TYPE: FMOD_RESULT = 12;
pub const FMOD_RESULT_FMOD_ERR_FILE_BAD: FMOD_RESULT = 13;
pub const FMOD_RESULT_FMOD_ERR_FILE_COULDNOTSEEK: FMOD_RESULT = 14;
pub const FMOD_RESULT_FMOD_ERR_FILE_DISKEJECTED: FMOD_RESULT = 15;
pub const FMOD_RESULT_FMOD_ERR_FILE_EOF: FMOD_RESULT = 16;
pub const FMOD_RESULT_FMOD_ERR_FILE_ENDOFDATA: FMOD_RESULT = 17;
pub const FMOD_RESULT_FMOD_ERR_FILE_NOTFOUND: FMOD_RESULT = 18;
pub const FMOD_RESULT_FMOD_ERR_FORMAT: FMOD_RESULT = 19;
pub const FMOD_RESULT_FMOD_ERR_HEADER_MISMATCH: FMOD_RESULT = 20;
pub const FMOD_RESULT_FMOD_ERR_HTTP: FMOD_RESULT = 21;
pub const FMOD_RESULT_FMOD_ERR_HTTP_ACCESS: FMOD_RESULT = 22;
pub const FMOD_RESULT_FMOD_ERR_HTTP_PROXY_AUTH: FMOD_RESULT = 23;
pub const FMOD_RESULT_FMOD_ERR_HTTP_SERVER_ERROR: FMOD_RESULT = 24;
pub const FMOD_RESULT_FMOD_ERR_HTTP_TIMEOUT: FMOD_RESULT = 25;
pub const FMOD_RESULT_FMOD_ERR_INITIALIZATION: FMOD_RESULT = 26;
pub const FMOD_RESULT_FMOD_ERR_INITIALIZED: FMOD_RESULT = 27;
pub const FMOD_RESULT_FMOD_ERR_INTERNAL: FMOD_RESULT = 28;
pub const FMOD_RESULT_FMOD_ERR_INVALID_FLOAT: FMOD_RESULT = 29;
pub const FMOD_RESULT_FMOD_ERR_INVALID_HANDLE: FMOD_RESULT = 30;
pub const FMOD_RESULT_FMOD_ERR_INVALID_PARAM: FMOD_RESULT = 31;
pub const FMOD_RESULT_FMOD_ERR_INVALID_POSITION: FMOD_RESULT = 32;
pub const FMOD_RESULT_FMOD_ERR_INVALID_SPEAKER: FMOD_RESULT = 33;
pub const FMOD_RESULT_FMOD_ERR_INVALID_SYNCPOINT: FMOD_RESULT = 34;
pub const FMOD_RESULT_FMOD_ERR_INVALID_THREAD: FMOD_RESULT = 35;
pub const FMOD_RESULT_FMOD_ERR_INVALID_VECTOR: FMOD_RESULT = 36;
pub const FMOD_RESULT_FMOD_ERR_MAXAUDIBLE: FMOD_RESULT = 37;
pub const FMOD_RESULT_FMOD_ERR_MEMORY: FMOD_RESULT = 38;
pub const FMOD_RESULT_FMOD_ERR_MEMORY_CANTPOINT: FMOD_RESULT = 39;
pub const FMOD_RESULT_FMOD_ERR_NEEDS3D: FMOD_RESULT = 40;
pub const FMOD_RESULT_FMOD_ERR_NEEDSHARDWARE: FMOD_RESULT = 41;
pub const FMOD_RESULT_FMOD_ERR_NET_CONNECT: FMOD_RESULT = 42;
pub const FMOD_RESULT_FMOD_ERR_NET_SOCKET_ERROR: FMOD_RESULT = 43;
pub const FMOD_RESULT_FMOD_ERR_NET_URL: FMOD_RESULT = 44;
pub const FMOD_RESULT_FMOD_ERR_NET_WOULD_BLOCK: FMOD_RESULT = 45;
pub const FMOD_RESULT_FMOD_ERR_NOTREADY: FMOD_RESULT = 46;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_ALLOCATED: FMOD_RESULT = 47;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_CREATEBUFFER: FMOD_RESULT = 48;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_DRIVERCALL: FMOD_RESULT = 49;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_FORMAT: FMOD_RESULT = 50;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_INIT: FMOD_RESULT = 51;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_NODRIVERS: FMOD_RESULT = 52;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN: FMOD_RESULT = 53;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_MISSING: FMOD_RESULT = 54;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_RESOURCE: FMOD_RESULT = 55;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_VERSION: FMOD_RESULT = 56;
pub const FMOD_RESULT_FMOD_ERR_RECORD: FMOD_RESULT = 57;
pub const FMOD_RESULT_FMOD_ERR_REVERB_CHANNELGROUP: FMOD_RESULT = 58;
pub const FMOD_RESULT_FMOD_ERR_REVERB_INSTANCE: FMOD_RESULT = 59;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUNDS: FMOD_RESULT = 60;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUND_ALLOCATED: FMOD_RESULT = 61;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUND_CANTMOVE: FMOD_RESULT = 62;
pub const FMOD_RESULT_FMOD_ERR_TAGNOTFOUND: FMOD_RESULT = 63;
pub const FMOD_RESULT_FMOD_ERR_TOOMANYCHANNELS: FMOD_RESULT = 64;
pub const FMOD_RESULT_FMOD_ERR_TRUNCATED: FMOD_RESULT = 65;
pub const FMOD_RESULT_FMOD_ERR_UNIMPLEMENTED: FMOD_RESULT = 66;
pub const FMOD_RESULT_FMOD_ERR_UNINITIALIZED: FMOD_RESULT = 67;
pub const FMOD_RESULT_FMOD_ERR_UNSUPPORTED: FMOD_RESULT = 68;
pub const FMOD_RESULT_FMOD_ERR_VERSION: FMOD_RESULT = 69;
pub const FMOD_RESULT_FMOD_ERR_EVENT_ALREADY_LOADED: FMOD_RESULT = 70;
pub const FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_BUSY: FMOD_RESULT = 71;
pub const FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH: FMOD_RESULT = 72;
pub const FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT: FMOD_RESULT = 73;
pub const FMOD_RESULT_FMOD_ERR_EVENT_NOTFOUND: FMOD_RESULT = 74;
pub const FMOD_RESULT_FMOD_ERR_STUDIO_UNINITIALIZED: FMOD_RESULT = 75;
pub const FMOD_RESULT_FMOD_ERR_STUDIO_NOT_LOADED: FMOD_RESULT = 76;
pub const FMOD_RESULT_FMOD_ERR_INVALID_STRING: FMOD_RESULT = 77;
pub const FMOD_RESULT_FMOD_ERR_ALREADY_LOCKED: FMOD_RESULT = 78;
pub const FMOD_RESULT_FMOD_ERR_NOT_LOCKED: FMOD_RESULT = 79;
pub const FMOD_RESULT_FMOD_ERR_RECORD_DISCONNECTED: FMOD_RESULT = 80;
pub const FMOD_RESULT_FMOD_ERR_TOOMANYSAMPLES: FMOD_RESULT = 81;
pub const FMOD_RESULT_FMOD_RESULT_FORCEINT: FMOD_RESULT = 65536;
pub type FMOD_RESULT = ::std::os::raw::c_int;
pub const FMOD_CHANNELCONTROL_TYPE_FMOD_CHANNELCONTROL_CHANNEL: FMOD_CHANNELCONTROL_TYPE = 0;
pub const FMOD_CHANNELCONTROL_TYPE_FMOD_CHANNELCONTROL_CHANNELGROUP: FMOD_CHANNELCONTROL_TYPE = 1;
pub const FMOD_CHANNELCONTROL_TYPE_FMOD_CHANNELCONTROL_MAX: FMOD_CHANNELCONTROL_TYPE = 2;
pub const FMOD_CHANNELCONTROL_TYPE_FMOD_CHANNELCONTROL_FORCEINT: FMOD_CHANNELCONTROL_TYPE = 65536;
pub type FMOD_CHANNELCONTROL_TYPE = ::std::os::raw::c_int;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUTODETECT: FMOD_OUTPUTTYPE = 0;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_UNKNOWN: FMOD_OUTPUTTYPE = 1;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NOSOUND: FMOD_OUTPUTTYPE = 2;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WAVWRITER: FMOD_OUTPUTTYPE = 3;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NOSOUND_NRT: FMOD_OUTPUTTYPE = 4;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WAVWRITER_NRT: FMOD_OUTPUTTYPE = 5;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WASAPI: FMOD_OUTPUTTYPE = 6;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ASIO: FMOD_OUTPUTTYPE = 7;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_PULSEAUDIO: FMOD_OUTPUTTYPE = 8;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ALSA: FMOD_OUTPUTTYPE = 9;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_COREAUDIO: FMOD_OUTPUTTYPE = 10;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIOTRACK: FMOD_OUTPUTTYPE = 11;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_OPENSL: FMOD_OUTPUTTYPE = 12;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIOOUT: FMOD_OUTPUTTYPE = 13;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIO3D: FMOD_OUTPUTTYPE = 14;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WEBAUDIO: FMOD_OUTPUTTYPE = 15;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NNAUDIO: FMOD_OUTPUTTYPE = 16;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WINSONIC: FMOD_OUTPUTTYPE = 17;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AAUDIO: FMOD_OUTPUTTYPE = 18;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIOWORKLET: FMOD_OUTPUTTYPE = 19;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_PHASE: FMOD_OUTPUTTYPE = 20;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_OHAUDIO: FMOD_OUTPUTTYPE = 21;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_MAX: FMOD_OUTPUTTYPE = 22;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_FORCEINT: FMOD_OUTPUTTYPE = 65536;
pub type FMOD_OUTPUTTYPE = ::std::os::raw::c_int;
pub const FMOD_DEBUG_MODE_FMOD_DEBUG_MODE_TTY: FMOD_DEBUG_MODE = 0;
pub const FMOD_DEBUG_MODE_FMOD_DEBUG_MODE_FILE: FMOD_DEBUG_MODE = 1;
pub const FMOD_DEBUG_MODE_FMOD_DEBUG_MODE_CALLBACK: FMOD_DEBUG_MODE = 2;
pub const FMOD_DEBUG_MODE_FMOD_DEBUG_MODE_FORCEINT: FMOD_DEBUG_MODE = 65536;
pub type FMOD_DEBUG_MODE = ::std::os::raw::c_int;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_DEFAULT: FMOD_SPEAKERMODE = 0;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_RAW: FMOD_SPEAKERMODE = 1;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_MONO: FMOD_SPEAKERMODE = 2;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_STEREO: FMOD_SPEAKERMODE = 3;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_QUAD: FMOD_SPEAKERMODE = 4;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_SURROUND: FMOD_SPEAKERMODE = 5;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_5POINT1: FMOD_SPEAKERMODE = 6;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_7POINT1: FMOD_SPEAKERMODE = 7;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_7POINT1POINT4: FMOD_SPEAKERMODE = 8;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_MAX: FMOD_SPEAKERMODE = 9;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_FORCEINT: FMOD_SPEAKERMODE = 65536;
pub type FMOD_SPEAKERMODE = ::std::os::raw::c_int;
pub const FMOD_SPEAKER_FMOD_SPEAKER_NONE: FMOD_SPEAKER = -1;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_LEFT: FMOD_SPEAKER = 0;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_RIGHT: FMOD_SPEAKER = 1;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_CENTER: FMOD_SPEAKER = 2;
pub const FMOD_SPEAKER_FMOD_SPEAKER_LOW_FREQUENCY: FMOD_SPEAKER = 3;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SURROUND_LEFT: FMOD_SPEAKER = 4;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SURROUND_RIGHT: FMOD_SPEAKER = 5;
pub const FMOD_SPEAKER_FMOD_SPEAKER_BACK_LEFT: FMOD_SPEAKER = 6;
pub const FMOD_SPEAKER_FMOD_SPEAKER_BACK_RIGHT: FMOD_SPEAKER = 7;
pub const FMOD_SPEAKER_FMOD_SPEAKER_TOP_FRONT_LEFT: FMOD_SPEAKER = 8;
pub const FMOD_SPEAKER_FMOD_SPEAKER_TOP_FRONT_RIGHT: FMOD_SPEAKER = 9;
pub const FMOD_SPEAKER_FMOD_SPEAKER_TOP_BACK_LEFT: FMOD_SPEAKER = 10;
pub const FMOD_SPEAKER_FMOD_SPEAKER_TOP_BACK_RIGHT: FMOD_SPEAKER = 11;
pub const FMOD_SPEAKER_FMOD_SPEAKER_MAX: FMOD_SPEAKER = 12;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FORCEINT: FMOD_SPEAKER = 65536;
pub type FMOD_SPEAKER = ::std::os::raw::c_int;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_DEFAULT: FMOD_CHANNELORDER = 0;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_WAVEFORMAT: FMOD_CHANNELORDER = 1;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_PROTOOLS: FMOD_CHANNELORDER = 2;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_ALLMONO: FMOD_CHANNELORDER = 3;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_ALLSTEREO: FMOD_CHANNELORDER = 4;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_ALSA: FMOD_CHANNELORDER = 5;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_MAX: FMOD_CHANNELORDER = 6;
pub const FMOD_CHANNELORDER_FMOD_CHANNELORDER_FORCEINT: FMOD_CHANNELORDER = 65536;
pub type FMOD_CHANNELORDER = ::std::os::raw::c_int;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_OUTPUT: FMOD_PLUGINTYPE = 0;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_CODEC: FMOD_PLUGINTYPE = 1;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_DSP: FMOD_PLUGINTYPE = 2;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_MAX: FMOD_PLUGINTYPE = 3;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_FORCEINT: FMOD_PLUGINTYPE = 65536;
pub type FMOD_PLUGINTYPE = ::std::os::raw::c_int;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_UNKNOWN: FMOD_SOUND_TYPE = 0;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AIFF: FMOD_SOUND_TYPE = 1;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_ASF: FMOD_SOUND_TYPE = 2;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_DLS: FMOD_SOUND_TYPE = 3;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FLAC: FMOD_SOUND_TYPE = 4;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FSB: FMOD_SOUND_TYPE = 5;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_IT: FMOD_SOUND_TYPE = 6;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MIDI: FMOD_SOUND_TYPE = 7;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MOD: FMOD_SOUND_TYPE = 8;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MPEG: FMOD_SOUND_TYPE = 9;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_OGGVORBIS: FMOD_SOUND_TYPE = 10;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_PLAYLIST: FMOD_SOUND_TYPE = 11;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_RAW: FMOD_SOUND_TYPE = 12;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_S3M: FMOD_SOUND_TYPE = 13;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_USER: FMOD_SOUND_TYPE = 14;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_WAV: FMOD_SOUND_TYPE = 15;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_XM: FMOD_SOUND_TYPE = 16;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_XMA: FMOD_SOUND_TYPE = 17;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AUDIOQUEUE: FMOD_SOUND_TYPE = 18;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AT9: FMOD_SOUND_TYPE = 19;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_VORBIS: FMOD_SOUND_TYPE = 20;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MEDIA_FOUNDATION: FMOD_SOUND_TYPE = 21;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MEDIACODEC: FMOD_SOUND_TYPE = 22;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FADPCM: FMOD_SOUND_TYPE = 23;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_OPUS: FMOD_SOUND_TYPE = 24;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MAX: FMOD_SOUND_TYPE = 25;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FORCEINT: FMOD_SOUND_TYPE = 65536;
pub type FMOD_SOUND_TYPE = ::std::os::raw::c_int;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_NONE: FMOD_SOUND_FORMAT = 0;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM8: FMOD_SOUND_FORMAT = 1;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM16: FMOD_SOUND_FORMAT = 2;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM24: FMOD_SOUND_FORMAT = 3;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM32: FMOD_SOUND_FORMAT = 4;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCMFLOAT: FMOD_SOUND_FORMAT = 5;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_BITSTREAM: FMOD_SOUND_FORMAT = 6;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_MAX: FMOD_SOUND_FORMAT = 7;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_FORCEINT: FMOD_SOUND_FORMAT = 65536;
pub type FMOD_SOUND_FORMAT = ::std::os::raw::c_int;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_READY: FMOD_OPENSTATE = 0;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_LOADING: FMOD_OPENSTATE = 1;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_ERROR: FMOD_OPENSTATE = 2;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_CONNECTING: FMOD_OPENSTATE = 3;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_BUFFERING: FMOD_OPENSTATE = 4;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_SEEKING: FMOD_OPENSTATE = 5;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_PLAYING: FMOD_OPENSTATE = 6;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_SETPOSITION: FMOD_OPENSTATE = 7;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_MAX: FMOD_OPENSTATE = 8;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_FORCEINT: FMOD_OPENSTATE = 65536;
pub type FMOD_OPENSTATE = ::std::os::raw::c_int;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_FAIL: FMOD_SOUNDGROUP_BEHAVIOR = 0;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_MUTE: FMOD_SOUNDGROUP_BEHAVIOR = 1;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST: FMOD_SOUNDGROUP_BEHAVIOR =
    2;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_MAX: FMOD_SOUNDGROUP_BEHAVIOR = 3;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT: FMOD_SOUNDGROUP_BEHAVIOR =
    65536;
pub type FMOD_SOUNDGROUP_BEHAVIOR = ::std::os::raw::c_int;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_END:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 0;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 1;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 2;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 3;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_MAX:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 4;
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE_FMOD_CHANNELCONTROL_CALLBACK_FORCEINT:
    FMOD_CHANNELCONTROL_CALLBACK_TYPE = 65536;
pub type FMOD_CHANNELCONTROL_CALLBACK_TYPE = ::std::os::raw::c_int;
pub const FMOD_CHANNELCONTROL_DSP_INDEX_FMOD_CHANNELCONTROL_DSP_HEAD:
    FMOD_CHANNELCONTROL_DSP_INDEX = -1;
pub const FMOD_CHANNELCONTROL_DSP_INDEX_FMOD_CHANNELCONTROL_DSP_FADER:
    FMOD_CHANNELCONTROL_DSP_INDEX = -2;
pub const FMOD_CHANNELCONTROL_DSP_INDEX_FMOD_CHANNELCONTROL_DSP_TAIL:
    FMOD_CHANNELCONTROL_DSP_INDEX = -3;
pub const FMOD_CHANNELCONTROL_DSP_INDEX_FMOD_CHANNELCONTROL_DSP_FORCEINT:
    FMOD_CHANNELCONTROL_DSP_INDEX = 65536;
pub type FMOD_CHANNELCONTROL_DSP_INDEX = ::std::os::raw::c_int;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_NONE:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 0;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 1;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 2;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 3;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 4;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 5;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 6;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_DSP:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 7;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 8;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 9;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 10;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 11;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION : FMOD_ERRORCALLBACK_INSTANCETYPE = 12 ;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 13;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE : FMOD_ERRORCALLBACK_INSTANCETYPE = 14 ;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 15;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 16;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 17;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 18;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT:
    FMOD_ERRORCALLBACK_INSTANCETYPE = 65536;
pub type FMOD_ERRORCALLBACK_INSTANCETYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_DEFAULT: FMOD_DSP_RESAMPLER = 0;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_NOINTERP: FMOD_DSP_RESAMPLER = 1;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_LINEAR: FMOD_DSP_RESAMPLER = 2;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_CUBIC: FMOD_DSP_RESAMPLER = 3;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_SPLINE: FMOD_DSP_RESAMPLER = 4;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_MAX: FMOD_DSP_RESAMPLER = 5;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_FORCEINT: FMOD_DSP_RESAMPLER = 65536;
pub type FMOD_DSP_RESAMPLER = ::std::os::raw::c_int;
pub const FMOD_DSP_CALLBACK_TYPE_FMOD_DSP_CALLBACK_DATAPARAMETERRELEASE: FMOD_DSP_CALLBACK_TYPE = 0;
pub const FMOD_DSP_CALLBACK_TYPE_FMOD_DSP_CALLBACK_MAX: FMOD_DSP_CALLBACK_TYPE = 1;
pub const FMOD_DSP_CALLBACK_TYPE_FMOD_DSP_CALLBACK_FORCEINT: FMOD_DSP_CALLBACK_TYPE = 65536;
pub type FMOD_DSP_CALLBACK_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_STANDARD: FMOD_DSPCONNECTION_TYPE = 0;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_SIDECHAIN: FMOD_DSPCONNECTION_TYPE = 1;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_SEND: FMOD_DSPCONNECTION_TYPE = 2;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN: FMOD_DSPCONNECTION_TYPE =
    3;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_MAX: FMOD_DSPCONNECTION_TYPE = 4;
pub const FMOD_DSPCONNECTION_TYPE_FMOD_DSPCONNECTION_TYPE_FORCEINT: FMOD_DSPCONNECTION_TYPE = 65536;
pub type FMOD_DSPCONNECTION_TYPE = ::std::os::raw::c_int;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_UNKNOWN: FMOD_TAGTYPE = 0;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ID3V1: FMOD_TAGTYPE = 1;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ID3V2: FMOD_TAGTYPE = 2;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_VORBISCOMMENT: FMOD_TAGTYPE = 3;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_SHOUTCAST: FMOD_TAGTYPE = 4;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ICECAST: FMOD_TAGTYPE = 5;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ASF: FMOD_TAGTYPE = 6;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_MIDI: FMOD_TAGTYPE = 7;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_PLAYLIST: FMOD_TAGTYPE = 8;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_FMOD: FMOD_TAGTYPE = 9;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_USER: FMOD_TAGTYPE = 10;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_MAX: FMOD_TAGTYPE = 11;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_FORCEINT: FMOD_TAGTYPE = 65536;
pub type FMOD_TAGTYPE = ::std::os::raw::c_int;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_BINARY: FMOD_TAGDATATYPE = 0;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_INT: FMOD_TAGDATATYPE = 1;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_FLOAT: FMOD_TAGDATATYPE = 2;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING: FMOD_TAGDATATYPE = 3;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF16: FMOD_TAGDATATYPE = 4;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF16BE: FMOD_TAGDATATYPE = 5;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF8: FMOD_TAGDATATYPE = 6;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_MAX: FMOD_TAGDATATYPE = 7;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_FORCEINT: FMOD_TAGDATATYPE = 65536;
pub type FMOD_TAGDATATYPE = ::std::os::raw::c_int;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_MUSIC: FMOD_PORT_TYPE = 0;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_COPYRIGHT_MUSIC: FMOD_PORT_TYPE = 1;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_VOICE: FMOD_PORT_TYPE = 2;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_CONTROLLER: FMOD_PORT_TYPE = 3;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_PERSONAL: FMOD_PORT_TYPE = 4;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_VIBRATION: FMOD_PORT_TYPE = 5;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_AUX: FMOD_PORT_TYPE = 6;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_MAX: FMOD_PORT_TYPE = 7;
pub const FMOD_PORT_TYPE_FMOD_PORT_TYPE_FORCEINT: FMOD_PORT_TYPE = 65536;
pub type FMOD_PORT_TYPE = ::std::os::raw::c_int;
pub type FMOD_DEBUG_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        flags: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SYSTEM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_SYSTEM_CALLBACK_TYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CHANNELCONTROL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        channelcontrol: *mut FMOD_CHANNELCONTROL,
        controltype: FMOD_CHANNELCONTROL_TYPE,
        callbacktype: FMOD_CHANNELCONTROL_CALLBACK_TYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp: *mut FMOD_DSP,
        type_: FMOD_DSP_CALLBACK_TYPE,
        data: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_NONBLOCK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(sound: *mut FMOD_SOUND, result: FMOD_RESULT) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMREAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMSETPOS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_OPEN_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        filesize: *mut ::std::os::raw::c_uint,
        handle: *mut *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_CLOSE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        sizebytes: ::std::os::raw::c_uint,
        bytesread: *mut ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_SEEK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        pos: ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCREAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut FMOD_ASYNCREADINFO,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCCANCEL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut FMOD_ASYNCREADINFO,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCDONE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO, result: FMOD_RESULT)>;
pub type FMOD_MEMORY_ALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_REALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_FREE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ),
>;
pub type FMOD_3D_ROLLOFF_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(channelcontrol: *mut FMOD_CHANNELCONTROL, distance: f32) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ASYNCREADINFO {
    pub handle: *mut ::std::os::raw::c_void,
    pub offset: ::std::os::raw::c_uint,
    pub sizebytes: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub buffer: *mut ::std::os::raw::c_void,
    pub bytesread: ::std::os::raw::c_uint,
    pub done: FMOD_FILE_ASYNCDONE_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_ASYNCREADINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_ASYNCREADINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_ASYNCREADINFO>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ASYNCREADINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizebytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(sizebytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesread) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(done)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_VECTOR {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_FMOD_VECTOR() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_VECTOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_VECTOR>(),
        12usize,
        concat!("Size of: ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_VECTOR>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_3D_ATTRIBUTES {
    pub position: FMOD_VECTOR,
    pub velocity: FMOD_VECTOR,
    pub forward: FMOD_VECTOR,
    pub up: FMOD_VECTOR,
}
#[test]
fn bindgen_test_layout_FMOD_3D_ATTRIBUTES() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_3D_ATTRIBUTES> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_3D_ATTRIBUTES>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_3D_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_3D_ATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_3D_ATTRIBUTES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(up)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_GUID {
    pub Data1: ::std::os::raw::c_uint,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_FMOD_GUID() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_GUID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_PLUGINLIST {
    pub type_: FMOD_PLUGINTYPE,
    pub description: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_FMOD_PLUGINLIST() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_PLUGINLIST> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_PLUGINLIST>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_PLUGINLIST))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_PLUGINLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_PLUGINLIST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_PLUGINLIST),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_PLUGINLIST),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ADVANCEDSETTINGS {
    pub cbSize: ::std::os::raw::c_int,
    pub maxMPEGCodecs: ::std::os::raw::c_int,
    pub maxADPCMCodecs: ::std::os::raw::c_int,
    pub maxXMACodecs: ::std::os::raw::c_int,
    pub maxVorbisCodecs: ::std::os::raw::c_int,
    pub maxAT9Codecs: ::std::os::raw::c_int,
    pub maxFADPCMCodecs: ::std::os::raw::c_int,
    pub maxPCMCodecs: ::std::os::raw::c_int,
    pub ASIONumChannels: ::std::os::raw::c_int,
    pub ASIOChannelList: *mut *mut ::std::os::raw::c_char,
    pub ASIOSpeakerList: *mut FMOD_SPEAKER,
    pub vol0virtualvol: f32,
    pub defaultDecodeBufferSize: ::std::os::raw::c_uint,
    pub profilePort: ::std::os::raw::c_ushort,
    pub geometryMaxFadeTime: ::std::os::raw::c_uint,
    pub distanceFilterCenterFreq: f32,
    pub reverb3Dinstance: ::std::os::raw::c_int,
    pub DSPBufferPoolSize: ::std::os::raw::c_int,
    pub resamplerMethod: FMOD_DSP_RESAMPLER,
    pub randomSeed: ::std::os::raw::c_uint,
    pub maxConvolutionThreads: ::std::os::raw::c_int,
    pub maxOpusCodecs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_ADVANCEDSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_ADVANCEDSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_ADVANCEDSETTINGS>(),
        104usize,
        concat!("Size of: ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ADVANCEDSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMPEGCodecs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxMPEGCodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxADPCMCodecs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxADPCMCodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxXMACodecs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxXMACodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVorbisCodecs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxVorbisCodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAT9Codecs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxAT9Codecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFADPCMCodecs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxFADPCMCodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPCMCodecs) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxPCMCodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIONumChannels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIONumChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIOChannelList) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOChannelList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIOSpeakerList) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOSpeakerList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vol0virtualvol) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(vol0virtualvol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultDecodeBufferSize) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(defaultDecodeBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profilePort) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(profilePort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryMaxFadeTime) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(geometryMaxFadeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distanceFilterCenterFreq) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(distanceFilterCenterFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverb3Dinstance) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(reverb3Dinstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DSPBufferPoolSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(DSPBufferPoolSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resamplerMethod) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(resamplerMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).randomSeed) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(randomSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxConvolutionThreads) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxConvolutionThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxOpusCodecs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxOpusCodecs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_TAG {
    pub type_: FMOD_TAGTYPE,
    pub datatype: FMOD_TAGDATATYPE,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub datalen: ::std::os::raw::c_uint,
    pub updated: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_TAG() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_TAG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_TAG>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_TAG>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datatype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datalen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updated) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(updated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CREATESOUNDEXINFO {
    pub cbsize: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_uint,
    pub fileoffset: ::std::os::raw::c_uint,
    pub numchannels: ::std::os::raw::c_int,
    pub defaultfrequency: ::std::os::raw::c_int,
    pub format: FMOD_SOUND_FORMAT,
    pub decodebuffersize: ::std::os::raw::c_uint,
    pub initialsubsound: ::std::os::raw::c_int,
    pub numsubsounds: ::std::os::raw::c_int,
    pub inclusionlist: *mut ::std::os::raw::c_int,
    pub inclusionlistnum: ::std::os::raw::c_int,
    pub pcmreadcallback: FMOD_SOUND_PCMREAD_CALLBACK,
    pub pcmsetposcallback: FMOD_SOUND_PCMSETPOS_CALLBACK,
    pub nonblockcallback: FMOD_SOUND_NONBLOCK_CALLBACK,
    pub dlsname: *const ::std::os::raw::c_char,
    pub encryptionkey: *const ::std::os::raw::c_char,
    pub maxpolyphony: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub suggestedsoundtype: FMOD_SOUND_TYPE,
    pub fileuseropen: FMOD_FILE_OPEN_CALLBACK,
    pub fileuserclose: FMOD_FILE_CLOSE_CALLBACK,
    pub fileuserread: FMOD_FILE_READ_CALLBACK,
    pub fileuserseek: FMOD_FILE_SEEK_CALLBACK,
    pub fileuserasyncread: FMOD_FILE_ASYNCREAD_CALLBACK,
    pub fileuserasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK,
    pub fileuserdata: *mut ::std::os::raw::c_void,
    pub filebuffersize: ::std::os::raw::c_int,
    pub channelorder: FMOD_CHANNELORDER,
    pub initialsoundgroup: *mut FMOD_SOUNDGROUP,
    pub initialseekposition: ::std::os::raw::c_uint,
    pub initialseekpostype: FMOD_TIMEUNIT,
    pub ignoresetfilesystem: ::std::os::raw::c_int,
    pub audioqueuepolicy: ::std::os::raw::c_uint,
    pub minmidigranularity: ::std::os::raw::c_uint,
    pub nonblockthreadid: ::std::os::raw::c_int,
    pub fsbguid: *mut FMOD_GUID,
}
#[test]
fn bindgen_test_layout_FMOD_CREATESOUNDEXINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CREATESOUNDEXINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CREATESOUNDEXINFO>(),
        224usize,
        concat!("Size of: ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CREATESOUNDEXINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileoffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numchannels) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numchannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultfrequency) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(defaultfrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodebuffersize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(decodebuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialsubsound) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsubsound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsubsounds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numsubsounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusionlist) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusionlistnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlistnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcmreadcallback) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmreadcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcmsetposcallback) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmsetposcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonblockcallback) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlsname) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(dlsname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryptionkey) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(encryptionkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxpolyphony) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(maxpolyphony)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggestedsoundtype) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(suggestedsoundtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuseropen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuseropen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserclose) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserclose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserread) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserseek) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserseek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserasyncread) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserasyncread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserasynccancel) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserasynccancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileuserdata) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filebuffersize) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(filebuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelorder) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(channelorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialsoundgroup) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsoundgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialseekposition) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialseekpostype) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekpostype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignoresetfilesystem) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(ignoresetfilesystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioqueuepolicy) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(audioqueuepolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minmidigranularity) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(minmidigranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonblockthreadid) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockthreadid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsbguid) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fsbguid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB_PROPERTIES {
    pub DecayTime: f32,
    pub EarlyDelay: f32,
    pub LateDelay: f32,
    pub HFReference: f32,
    pub HFDecayRatio: f32,
    pub Diffusion: f32,
    pub Density: f32,
    pub LowShelfFrequency: f32,
    pub LowShelfGain: f32,
    pub HighCut: f32,
    pub EarlyLateMix: f32,
    pub WetLevel: f32,
}
#[test]
fn bindgen_test_layout_FMOD_REVERB_PROPERTIES() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_REVERB_PROPERTIES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_REVERB_PROPERTIES>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_REVERB_PROPERTIES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecayTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(DecayTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EarlyDelay) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(EarlyDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LateDelay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LateDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HFReference) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HFReference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HFDecayRatio) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HFDecayRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Diffusion) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Diffusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Density) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowShelfFrequency) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LowShelfFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowShelfGain) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LowShelfGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighCut) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HighCut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EarlyLateMix) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(EarlyLateMix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WetLevel) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(WetLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ERRORCALLBACK_INFO {
    pub result: FMOD_RESULT,
    pub instancetype: FMOD_ERRORCALLBACK_INSTANCETYPE,
    pub instance: *mut ::std::os::raw::c_void,
    pub functionname: *const ::std::os::raw::c_char,
    pub functionparams: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_ERRORCALLBACK_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_ERRORCALLBACK_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_ERRORCALLBACK_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_ERRORCALLBACK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ERRORCALLBACK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ERRORCALLBACK_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instancetype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(instancetype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(functionname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionparams) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(functionparams)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CPU_USAGE {
    pub dsp: f32,
    pub stream: f32,
    pub geometry: f32,
    pub update: f32,
    pub convolution1: f32,
    pub convolution2: f32,
}
#[test]
fn bindgen_test_layout_FMOD_CPU_USAGE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CPU_USAGE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CPU_USAGE>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_CPU_USAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CPU_USAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_CPU_USAGE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(dsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convolution1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(convolution1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convolution2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CPU_USAGE),
            "::",
            stringify!(convolution2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_DATA_PARAMETER_INFO {
    pub data: *mut ::std::os::raw::c_void,
    pub length: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_DATA_PARAMETER_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_DATA_PARAMETER_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_DATA_PARAMETER_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_DSP_DATA_PARAMETER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_DATA_PARAMETER_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_DATA_PARAMETER_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DATA_PARAMETER_INFO),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DATA_PARAMETER_INFO),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DATA_PARAMETER_INFO),
            "::",
            stringify!(index)
        )
    );
}
pub type FMOD_CODEC_SEEK_METHOD = ::std::os::raw::c_int;
pub type FMOD_CODEC_OPEN_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        usermode: FMOD_MODE,
        userexinfo: *mut FMOD_CREATESOUNDEXINFO,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state: *mut FMOD_CODEC_STATE) -> FMOD_RESULT>;
pub type FMOD_CODEC_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        buffer: *mut ::std::os::raw::c_void,
        samples_in: ::std::os::raw::c_uint,
        samples_out: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETLENGTH_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        length: *mut ::std::os::raw::c_uint,
        lengthtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        position: *mut ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SOUNDCREATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETWAVEFORMAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        index: ::std::os::raw::c_int,
        waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_METADATA_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        tagtype: FMOD_TAGTYPE,
        name: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
        datatype: FMOD_TAGDATATYPE,
        unique: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_CODEC_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ),
>;
pub type FMOD_CODEC_LOG_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        level: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type FMOD_CODEC_FILE_READ_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        buffer: *mut ::std::os::raw::c_void,
        sizebytes: ::std::os::raw::c_uint,
        bytesread: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_FILE_SEEK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        pos: ::std::os::raw::c_uint,
        method: FMOD_CODEC_SEEK_METHOD,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_FILE_TELL_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        pos: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_FILE_SIZE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        size: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_DESCRIPTION {
    pub apiversion: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub defaultasstream: ::std::os::raw::c_int,
    pub timeunits: FMOD_TIMEUNIT,
    pub open: FMOD_CODEC_OPEN_CALLBACK,
    pub close: FMOD_CODEC_CLOSE_CALLBACK,
    pub read: FMOD_CODEC_READ_CALLBACK,
    pub getlength: FMOD_CODEC_GETLENGTH_CALLBACK,
    pub setposition: FMOD_CODEC_SETPOSITION_CALLBACK,
    pub getposition: FMOD_CODEC_GETPOSITION_CALLBACK,
    pub soundcreate: FMOD_CODEC_SOUNDCREATE_CALLBACK,
    pub getwaveformat: FMOD_CODEC_GETWAVEFORMAT_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_DESCRIPTION() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_DESCRIPTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_DESCRIPTION>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiversion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(apiversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultasstream) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(defaultasstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeunits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(timeunits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getlength) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setposition) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getposition) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundcreate) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(soundcreate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getwaveformat) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getwaveformat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_WAVEFORMAT {
    pub name: *const ::std::os::raw::c_char,
    pub format: FMOD_SOUND_FORMAT,
    pub channels: ::std::os::raw::c_int,
    pub frequency: ::std::os::raw::c_int,
    pub lengthbytes: ::std::os::raw::c_uint,
    pub lengthpcm: ::std::os::raw::c_uint,
    pub pcmblocksize: ::std::os::raw::c_uint,
    pub loopstart: ::std::os::raw::c_int,
    pub loopend: ::std::os::raw::c_int,
    pub mode: FMOD_MODE,
    pub channelmask: FMOD_CHANNELMASK,
    pub channelorder: FMOD_CHANNELORDER,
    pub peakvolume: f32,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_WAVEFORMAT() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_WAVEFORMAT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_WAVEFORMAT>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_WAVEFORMAT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthbytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthpcm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthpcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcmblocksize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(pcmblocksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopstart) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopend) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelmask) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channelmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelorder) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channelorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peakvolume) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(peakvolume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_STATE_FUNCTIONS {
    pub metadata: FMOD_CODEC_METADATA_FUNC,
    pub alloc: FMOD_CODEC_ALLOC_FUNC,
    pub free: FMOD_CODEC_FREE_FUNC,
    pub log: FMOD_CODEC_LOG_FUNC,
    pub read: FMOD_CODEC_FILE_READ_FUNC,
    pub seek: FMOD_CODEC_FILE_SEEK_FUNC,
    pub tell: FMOD_CODEC_FILE_TELL_FUNC,
    pub size: FMOD_CODEC_FILE_SIZE_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_STATE_FUNCTIONS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_STATE_FUNCTIONS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_STATE_FUNCTIONS>(),
        64usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_STATE_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_STATE_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_STATE_FUNCTIONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tell) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE_FUNCTIONS),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_STATE {
    pub plugindata: *mut ::std::os::raw::c_void,
    pub waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    pub functions: *mut FMOD_CODEC_STATE_FUNCTIONS,
    pub numsubsounds: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_STATE>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugindata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveformat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(waveformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsubsounds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(numsubsounds)
        )
    );
}
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_UNKNOWN: FMOD_DSP_TYPE = 0;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_MIXER: FMOD_DSP_TYPE = 1;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_OSCILLATOR: FMOD_DSP_TYPE = 2;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LOWPASS: FMOD_DSP_TYPE = 3;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ITLOWPASS: FMOD_DSP_TYPE = 4;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_HIGHPASS: FMOD_DSP_TYPE = 5;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ECHO: FMOD_DSP_TYPE = 6;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FADER: FMOD_DSP_TYPE = 7;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FLANGE: FMOD_DSP_TYPE = 8;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_DISTORTION: FMOD_DSP_TYPE = 9;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_NORMALIZE: FMOD_DSP_TYPE = 10;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LIMITER: FMOD_DSP_TYPE = 11;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_PARAMEQ: FMOD_DSP_TYPE = 12;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_PITCHSHIFT: FMOD_DSP_TYPE = 13;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_CHORUS: FMOD_DSP_TYPE = 14;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_VSTPLUGIN: FMOD_DSP_TYPE = 15;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_WINAMPPLUGIN: FMOD_DSP_TYPE = 16;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ITECHO: FMOD_DSP_TYPE = 17;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_COMPRESSOR: FMOD_DSP_TYPE = 18;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_SFXREVERB: FMOD_DSP_TYPE = 19;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LOWPASS_SIMPLE: FMOD_DSP_TYPE = 20;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_DELAY: FMOD_DSP_TYPE = 21;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_TREMOLO: FMOD_DSP_TYPE = 22;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LADSPAPLUGIN: FMOD_DSP_TYPE = 23;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_SEND: FMOD_DSP_TYPE = 24;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_RETURN: FMOD_DSP_TYPE = 25;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_HIGHPASS_SIMPLE: FMOD_DSP_TYPE = 26;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_PAN: FMOD_DSP_TYPE = 27;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_THREE_EQ: FMOD_DSP_TYPE = 28;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FFT: FMOD_DSP_TYPE = 29;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LOUDNESS_METER: FMOD_DSP_TYPE = 30;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ENVELOPEFOLLOWER: FMOD_DSP_TYPE = 31;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_CONVOLUTIONREVERB: FMOD_DSP_TYPE = 32;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_CHANNELMIX: FMOD_DSP_TYPE = 33;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_TRANSCEIVER: FMOD_DSP_TYPE = 34;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_OBJECTPAN: FMOD_DSP_TYPE = 35;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_MULTIBAND_EQ: FMOD_DSP_TYPE = 36;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_MAX: FMOD_DSP_TYPE = 37;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FORCEINT: FMOD_DSP_TYPE = 65536;
pub type FMOD_DSP_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_OSCILLATOR_FMOD_DSP_OSCILLATOR_TYPE: FMOD_DSP_OSCILLATOR = 0;
pub const FMOD_DSP_OSCILLATOR_FMOD_DSP_OSCILLATOR_RATE: FMOD_DSP_OSCILLATOR = 1;
pub type FMOD_DSP_OSCILLATOR = ::std::os::raw::c_int;
pub const FMOD_DSP_LOWPASS_FMOD_DSP_LOWPASS_CUTOFF: FMOD_DSP_LOWPASS = 0;
pub const FMOD_DSP_LOWPASS_FMOD_DSP_LOWPASS_RESONANCE: FMOD_DSP_LOWPASS = 1;
pub type FMOD_DSP_LOWPASS = ::std::os::raw::c_int;
pub const FMOD_DSP_ITLOWPASS_FMOD_DSP_ITLOWPASS_CUTOFF: FMOD_DSP_ITLOWPASS = 0;
pub const FMOD_DSP_ITLOWPASS_FMOD_DSP_ITLOWPASS_RESONANCE: FMOD_DSP_ITLOWPASS = 1;
pub type FMOD_DSP_ITLOWPASS = ::std::os::raw::c_int;
pub const FMOD_DSP_HIGHPASS_FMOD_DSP_HIGHPASS_CUTOFF: FMOD_DSP_HIGHPASS = 0;
pub const FMOD_DSP_HIGHPASS_FMOD_DSP_HIGHPASS_RESONANCE: FMOD_DSP_HIGHPASS = 1;
pub type FMOD_DSP_HIGHPASS = ::std::os::raw::c_int;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_DELAY: FMOD_DSP_ECHO = 0;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_FEEDBACK: FMOD_DSP_ECHO = 1;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_DRYLEVEL: FMOD_DSP_ECHO = 2;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_WETLEVEL: FMOD_DSP_ECHO = 3;
pub type FMOD_DSP_ECHO = ::std::os::raw::c_int;
pub const FMOD_DSP_FADER_FMOD_DSP_FADER_GAIN: FMOD_DSP_FADER = 0;
pub const FMOD_DSP_FADER_FMOD_DSP_FADER_OVERALL_GAIN: FMOD_DSP_FADER = 1;
pub type FMOD_DSP_FADER = ::std::os::raw::c_int;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_MIX: FMOD_DSP_FLANGE = 0;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_DEPTH: FMOD_DSP_FLANGE = 1;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_RATE: FMOD_DSP_FLANGE = 2;
pub type FMOD_DSP_FLANGE = ::std::os::raw::c_int;
pub const FMOD_DSP_DISTORTION_FMOD_DSP_DISTORTION_LEVEL: FMOD_DSP_DISTORTION = 0;
pub type FMOD_DSP_DISTORTION = ::std::os::raw::c_int;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_FADETIME: FMOD_DSP_NORMALIZE = 0;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_THRESHOLD: FMOD_DSP_NORMALIZE = 1;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_MAXAMP: FMOD_DSP_NORMALIZE = 2;
pub type FMOD_DSP_NORMALIZE = ::std::os::raw::c_int;
pub const FMOD_DSP_LIMITER_FMOD_DSP_LIMITER_RELEASETIME: FMOD_DSP_LIMITER = 0;
pub const FMOD_DSP_LIMITER_FMOD_DSP_LIMITER_CEILING: FMOD_DSP_LIMITER = 1;
pub const FMOD_DSP_LIMITER_FMOD_DSP_LIMITER_MAXIMIZERGAIN: FMOD_DSP_LIMITER = 2;
pub const FMOD_DSP_LIMITER_FMOD_DSP_LIMITER_MODE: FMOD_DSP_LIMITER = 3;
pub type FMOD_DSP_LIMITER = ::std::os::raw::c_int;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_CENTER: FMOD_DSP_PARAMEQ = 0;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_BANDWIDTH: FMOD_DSP_PARAMEQ = 1;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_GAIN: FMOD_DSP_PARAMEQ = 2;
pub type FMOD_DSP_PARAMEQ = ::std::os::raw::c_int;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_A_FILTER: FMOD_DSP_MULTIBAND_EQ = 0;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY: FMOD_DSP_MULTIBAND_EQ = 1;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_A_Q: FMOD_DSP_MULTIBAND_EQ = 2;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_A_GAIN: FMOD_DSP_MULTIBAND_EQ = 3;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_B_FILTER: FMOD_DSP_MULTIBAND_EQ = 4;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY: FMOD_DSP_MULTIBAND_EQ = 5;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_B_Q: FMOD_DSP_MULTIBAND_EQ = 6;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_B_GAIN: FMOD_DSP_MULTIBAND_EQ = 7;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_C_FILTER: FMOD_DSP_MULTIBAND_EQ = 8;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY: FMOD_DSP_MULTIBAND_EQ = 9;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_C_Q: FMOD_DSP_MULTIBAND_EQ = 10;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_C_GAIN: FMOD_DSP_MULTIBAND_EQ = 11;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_D_FILTER: FMOD_DSP_MULTIBAND_EQ = 12;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY: FMOD_DSP_MULTIBAND_EQ = 13;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_D_Q: FMOD_DSP_MULTIBAND_EQ = 14;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_D_GAIN: FMOD_DSP_MULTIBAND_EQ = 15;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_E_FILTER: FMOD_DSP_MULTIBAND_EQ = 16;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY: FMOD_DSP_MULTIBAND_EQ = 17;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_E_Q: FMOD_DSP_MULTIBAND_EQ = 18;
pub const FMOD_DSP_MULTIBAND_EQ_FMOD_DSP_MULTIBAND_EQ_E_GAIN: FMOD_DSP_MULTIBAND_EQ = 19;
pub type FMOD_DSP_MULTIBAND_EQ = ::std::os::raw::c_int;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 0;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 1;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 2;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 3;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 4;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 5;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 6;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 7;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 8;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 9;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 10;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 11;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE_FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS:
    FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = 12;
pub type FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_PITCH: FMOD_DSP_PITCHSHIFT = 0;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_FFTSIZE: FMOD_DSP_PITCHSHIFT = 1;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_OVERLAP: FMOD_DSP_PITCHSHIFT = 2;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_MAXCHANNELS: FMOD_DSP_PITCHSHIFT = 3;
pub type FMOD_DSP_PITCHSHIFT = ::std::os::raw::c_int;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_MIX: FMOD_DSP_CHORUS = 0;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_RATE: FMOD_DSP_CHORUS = 1;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_DEPTH: FMOD_DSP_CHORUS = 2;
pub type FMOD_DSP_CHORUS = ::std::os::raw::c_int;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_WETDRYMIX: FMOD_DSP_ITECHO = 0;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_FEEDBACK: FMOD_DSP_ITECHO = 1;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_LEFTDELAY: FMOD_DSP_ITECHO = 2;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_RIGHTDELAY: FMOD_DSP_ITECHO = 3;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_PANDELAY: FMOD_DSP_ITECHO = 4;
pub type FMOD_DSP_ITECHO = ::std::os::raw::c_int;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_THRESHOLD: FMOD_DSP_COMPRESSOR = 0;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_RATIO: FMOD_DSP_COMPRESSOR = 1;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_ATTACK: FMOD_DSP_COMPRESSOR = 2;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_RELEASE: FMOD_DSP_COMPRESSOR = 3;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_GAINMAKEUP: FMOD_DSP_COMPRESSOR = 4;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_USESIDECHAIN: FMOD_DSP_COMPRESSOR = 5;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_LINKED: FMOD_DSP_COMPRESSOR = 6;
pub type FMOD_DSP_COMPRESSOR = ::std::os::raw::c_int;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DECAYTIME: FMOD_DSP_SFXREVERB = 0;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_EARLYDELAY: FMOD_DSP_SFXREVERB = 1;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_LATEDELAY: FMOD_DSP_SFXREVERB = 2;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_HFREFERENCE: FMOD_DSP_SFXREVERB = 3;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_HFDECAYRATIO: FMOD_DSP_SFXREVERB = 4;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DIFFUSION: FMOD_DSP_SFXREVERB = 5;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DENSITY: FMOD_DSP_SFXREVERB = 6;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY: FMOD_DSP_SFXREVERB = 7;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_LOWSHELFGAIN: FMOD_DSP_SFXREVERB = 8;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_HIGHCUT: FMOD_DSP_SFXREVERB = 9;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_EARLYLATEMIX: FMOD_DSP_SFXREVERB = 10;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_WETLEVEL: FMOD_DSP_SFXREVERB = 11;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DRYLEVEL: FMOD_DSP_SFXREVERB = 12;
pub type FMOD_DSP_SFXREVERB = ::std::os::raw::c_int;
pub const FMOD_DSP_LOWPASS_SIMPLE_FMOD_DSP_LOWPASS_SIMPLE_CUTOFF: FMOD_DSP_LOWPASS_SIMPLE = 0;
pub type FMOD_DSP_LOWPASS_SIMPLE = ::std::os::raw::c_int;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH0: FMOD_DSP_DELAY = 0;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH1: FMOD_DSP_DELAY = 1;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH2: FMOD_DSP_DELAY = 2;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH3: FMOD_DSP_DELAY = 3;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH4: FMOD_DSP_DELAY = 4;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH5: FMOD_DSP_DELAY = 5;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH6: FMOD_DSP_DELAY = 6;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH7: FMOD_DSP_DELAY = 7;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH8: FMOD_DSP_DELAY = 8;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH9: FMOD_DSP_DELAY = 9;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH10: FMOD_DSP_DELAY = 10;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH11: FMOD_DSP_DELAY = 11;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH12: FMOD_DSP_DELAY = 12;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH13: FMOD_DSP_DELAY = 13;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH14: FMOD_DSP_DELAY = 14;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH15: FMOD_DSP_DELAY = 15;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_MAXDELAY: FMOD_DSP_DELAY = 16;
pub type FMOD_DSP_DELAY = ::std::os::raw::c_int;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_FREQUENCY: FMOD_DSP_TREMOLO = 0;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_DEPTH: FMOD_DSP_TREMOLO = 1;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SHAPE: FMOD_DSP_TREMOLO = 2;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SKEW: FMOD_DSP_TREMOLO = 3;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_DUTY: FMOD_DSP_TREMOLO = 4;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SQUARE: FMOD_DSP_TREMOLO = 5;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_PHASE: FMOD_DSP_TREMOLO = 6;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SPREAD: FMOD_DSP_TREMOLO = 7;
pub type FMOD_DSP_TREMOLO = ::std::os::raw::c_int;
pub const FMOD_DSP_SEND_FMOD_DSP_SEND_RETURNID: FMOD_DSP_SEND = 0;
pub const FMOD_DSP_SEND_FMOD_DSP_SEND_LEVEL: FMOD_DSP_SEND = 1;
pub type FMOD_DSP_SEND = ::std::os::raw::c_int;
pub const FMOD_DSP_RETURN_FMOD_DSP_RETURN_ID: FMOD_DSP_RETURN = 0;
pub const FMOD_DSP_RETURN_FMOD_DSP_RETURN_INPUT_SPEAKER_MODE: FMOD_DSP_RETURN = 1;
pub type FMOD_DSP_RETURN = ::std::os::raw::c_int;
pub const FMOD_DSP_HIGHPASS_SIMPLE_FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF: FMOD_DSP_HIGHPASS_SIMPLE = 0;
pub type FMOD_DSP_HIGHPASS_SIMPLE = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_2D_STEREO_MODE_TYPE_FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED:
    FMOD_DSP_PAN_2D_STEREO_MODE_TYPE = 0;
pub const FMOD_DSP_PAN_2D_STEREO_MODE_TYPE_FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE:
    FMOD_DSP_PAN_2D_STEREO_MODE_TYPE = 1;
pub type FMOD_DSP_PAN_2D_STEREO_MODE_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_MODE_TYPE_FMOD_DSP_PAN_MODE_MONO: FMOD_DSP_PAN_MODE_TYPE = 0;
pub const FMOD_DSP_PAN_MODE_TYPE_FMOD_DSP_PAN_MODE_STEREO: FMOD_DSP_PAN_MODE_TYPE = 1;
pub const FMOD_DSP_PAN_MODE_TYPE_FMOD_DSP_PAN_MODE_SURROUND: FMOD_DSP_PAN_MODE_TYPE = 2;
pub type FMOD_DSP_PAN_MODE_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE_FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED:
    FMOD_DSP_PAN_3D_ROLLOFF_TYPE = 0;
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE_FMOD_DSP_PAN_3D_ROLLOFF_LINEAR:
    FMOD_DSP_PAN_3D_ROLLOFF_TYPE = 1;
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE_FMOD_DSP_PAN_3D_ROLLOFF_INVERSE:
    FMOD_DSP_PAN_3D_ROLLOFF_TYPE = 2;
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE_FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED:
    FMOD_DSP_PAN_3D_ROLLOFF_TYPE = 3;
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE_FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM:
    FMOD_DSP_PAN_3D_ROLLOFF_TYPE = 4;
pub type FMOD_DSP_PAN_3D_ROLLOFF_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE_FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO:
    FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE = 0;
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE_FMOD_DSP_PAN_3D_EXTENT_MODE_USER:
    FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE = 1;
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE_FMOD_DSP_PAN_3D_EXTENT_MODE_OFF:
    FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE = 2;
pub type FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_MODE: FMOD_DSP_PAN = 0;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_STEREO_POSITION: FMOD_DSP_PAN = 1;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_DIRECTION: FMOD_DSP_PAN = 2;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_EXTENT: FMOD_DSP_PAN = 3;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_ROTATION: FMOD_DSP_PAN = 4;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_LFE_LEVEL: FMOD_DSP_PAN = 5;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_STEREO_MODE: FMOD_DSP_PAN = 6;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_STEREO_SEPARATION: FMOD_DSP_PAN = 7;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_STEREO_AXIS: FMOD_DSP_PAN = 8;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_ENABLED_SPEAKERS: FMOD_DSP_PAN = 9;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_POSITION: FMOD_DSP_PAN = 10;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_ROLLOFF: FMOD_DSP_PAN = 11;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_MIN_DISTANCE: FMOD_DSP_PAN = 12;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_MAX_DISTANCE: FMOD_DSP_PAN = 13;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_EXTENT_MODE: FMOD_DSP_PAN = 14;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_SOUND_SIZE: FMOD_DSP_PAN = 15;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_MIN_EXTENT: FMOD_DSP_PAN = 16;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_3D_PAN_BLEND: FMOD_DSP_PAN = 17;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_LFE_UPMIX_ENABLED: FMOD_DSP_PAN = 18;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_OVERALL_GAIN: FMOD_DSP_PAN = 19;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_SURROUND_SPEAKER_MODE: FMOD_DSP_PAN = 20;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_2D_HEIGHT_BLEND: FMOD_DSP_PAN = 21;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_ATTENUATION_RANGE: FMOD_DSP_PAN = 22;
pub const FMOD_DSP_PAN_FMOD_DSP_PAN_OVERRIDE_RANGE: FMOD_DSP_PAN = 23;
pub type FMOD_DSP_PAN = ::std::os::raw::c_int;
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE_FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB:
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE = 0;
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE_FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB:
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE = 1;
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE_FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB:
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE = 2;
pub type FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_LOWGAIN: FMOD_DSP_THREE_EQ = 0;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_MIDGAIN: FMOD_DSP_THREE_EQ = 1;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_HIGHGAIN: FMOD_DSP_THREE_EQ = 2;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_LOWCROSSOVER: FMOD_DSP_THREE_EQ = 3;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_HIGHCROSSOVER: FMOD_DSP_THREE_EQ = 4;
pub const FMOD_DSP_THREE_EQ_FMOD_DSP_THREE_EQ_CROSSOVERSLOPE: FMOD_DSP_THREE_EQ = 5;
pub type FMOD_DSP_THREE_EQ = ::std::os::raw::c_int;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_RECT: FMOD_DSP_FFT_WINDOW = 0;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_TRIANGLE: FMOD_DSP_FFT_WINDOW = 1;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_HAMMING: FMOD_DSP_FFT_WINDOW = 2;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_HANNING: FMOD_DSP_FFT_WINDOW = 3;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_BLACKMAN: FMOD_DSP_FFT_WINDOW = 4;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS: FMOD_DSP_FFT_WINDOW = 5;
pub type FMOD_DSP_FFT_WINDOW = ::std::os::raw::c_int;
pub const FMOD_DSP_FFT_FMOD_DSP_FFT_WINDOWSIZE: FMOD_DSP_FFT = 0;
pub const FMOD_DSP_FFT_FMOD_DSP_FFT_WINDOWTYPE: FMOD_DSP_FFT = 1;
pub const FMOD_DSP_FFT_FMOD_DSP_FFT_SPECTRUMDATA: FMOD_DSP_FFT = 2;
pub const FMOD_DSP_FFT_FMOD_DSP_FFT_DOMINANT_FREQ: FMOD_DSP_FFT = 3;
pub type FMOD_DSP_FFT = ::std::os::raw::c_int;
pub const FMOD_DSP_LOUDNESS_METER_FMOD_DSP_LOUDNESS_METER_STATE: FMOD_DSP_LOUDNESS_METER = 0;
pub const FMOD_DSP_LOUDNESS_METER_FMOD_DSP_LOUDNESS_METER_WEIGHTING: FMOD_DSP_LOUDNESS_METER = 1;
pub const FMOD_DSP_LOUDNESS_METER_FMOD_DSP_LOUDNESS_METER_INFO: FMOD_DSP_LOUDNESS_METER = 2;
pub type FMOD_DSP_LOUDNESS_METER = ::std::os::raw::c_int;
pub const FMOD_DSP_LOUDNESS_METER_STATE_TYPE_FMOD_DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED:
    FMOD_DSP_LOUDNESS_METER_STATE_TYPE = -3;
pub const FMOD_DSP_LOUDNESS_METER_STATE_TYPE_FMOD_DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK:
    FMOD_DSP_LOUDNESS_METER_STATE_TYPE = -2;
pub const FMOD_DSP_LOUDNESS_METER_STATE_TYPE_FMOD_DSP_LOUDNESS_METER_STATE_RESET_ALL:
    FMOD_DSP_LOUDNESS_METER_STATE_TYPE = -1;
pub const FMOD_DSP_LOUDNESS_METER_STATE_TYPE_FMOD_DSP_LOUDNESS_METER_STATE_PAUSED:
    FMOD_DSP_LOUDNESS_METER_STATE_TYPE = 0;
pub const FMOD_DSP_LOUDNESS_METER_STATE_TYPE_FMOD_DSP_LOUDNESS_METER_STATE_ANALYZING:
    FMOD_DSP_LOUDNESS_METER_STATE_TYPE = 1;
pub type FMOD_DSP_LOUDNESS_METER_STATE_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_LOUDNESS_METER_INFO_TYPE {
    pub momentaryloudness: f32,
    pub shorttermloudness: f32,
    pub integratedloudness: f32,
    pub loudness10thpercentile: f32,
    pub loudness95thpercentile: f32,
    pub loudnesshistogram: [f32; 66usize],
    pub maxtruepeak: f32,
    pub maxmomentaryloudness: f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_LOUDNESS_METER_INFO_TYPE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_LOUDNESS_METER_INFO_TYPE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_LOUDNESS_METER_INFO_TYPE>(),
        292usize,
        concat!("Size of: ", stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_LOUDNESS_METER_INFO_TYPE>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).momentaryloudness) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(momentaryloudness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shorttermloudness) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(shorttermloudness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integratedloudness) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(integratedloudness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loudness10thpercentile) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(loudness10thpercentile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loudness95thpercentile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(loudness95thpercentile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loudnesshistogram) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(loudnesshistogram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxtruepeak) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(maxtruepeak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxmomentaryloudness) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_INFO_TYPE),
            "::",
            stringify!(maxmomentaryloudness)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE {
    pub channelweight: [f32; 32usize],
}
#[test]
fn bindgen_test_layout_FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelweight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_LOUDNESS_METER_WEIGHTING_TYPE),
            "::",
            stringify!(channelweight)
        )
    );
}
pub const FMOD_DSP_ENVELOPEFOLLOWER_FMOD_DSP_ENVELOPEFOLLOWER_ATTACK: FMOD_DSP_ENVELOPEFOLLOWER = 0;
pub const FMOD_DSP_ENVELOPEFOLLOWER_FMOD_DSP_ENVELOPEFOLLOWER_RELEASE: FMOD_DSP_ENVELOPEFOLLOWER =
    1;
pub const FMOD_DSP_ENVELOPEFOLLOWER_FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE: FMOD_DSP_ENVELOPEFOLLOWER =
    2;
pub const FMOD_DSP_ENVELOPEFOLLOWER_FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN:
    FMOD_DSP_ENVELOPEFOLLOWER = 3;
pub type FMOD_DSP_ENVELOPEFOLLOWER = ::std::os::raw::c_int;
pub const FMOD_DSP_CONVOLUTION_REVERB_FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR:
    FMOD_DSP_CONVOLUTION_REVERB = 0;
pub const FMOD_DSP_CONVOLUTION_REVERB_FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET:
    FMOD_DSP_CONVOLUTION_REVERB = 1;
pub const FMOD_DSP_CONVOLUTION_REVERB_FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY:
    FMOD_DSP_CONVOLUTION_REVERB = 2;
pub const FMOD_DSP_CONVOLUTION_REVERB_FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED:
    FMOD_DSP_CONVOLUTION_REVERB = 3;
pub type FMOD_DSP_CONVOLUTION_REVERB = ::std::os::raw::c_int;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT:
    FMOD_DSP_CHANNELMIX_OUTPUT = 0;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO:
    FMOD_DSP_CHANNELMIX_OUTPUT = 1;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO:
    FMOD_DSP_CHANNELMIX_OUTPUT = 2;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD:
    FMOD_DSP_CHANNELMIX_OUTPUT = 3;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1:
    FMOD_DSP_CHANNELMIX_OUTPUT = 4;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1:
    FMOD_DSP_CHANNELMIX_OUTPUT = 5;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE: FMOD_DSP_CHANNELMIX_OUTPUT =
    6;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4:
    FMOD_DSP_CHANNELMIX_OUTPUT = 7;
pub type FMOD_DSP_CHANNELMIX_OUTPUT = ::std::os::raw::c_int;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUTGROUPING: FMOD_DSP_CHANNELMIX = 0;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH0: FMOD_DSP_CHANNELMIX = 1;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH1: FMOD_DSP_CHANNELMIX = 2;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH2: FMOD_DSP_CHANNELMIX = 3;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH3: FMOD_DSP_CHANNELMIX = 4;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH4: FMOD_DSP_CHANNELMIX = 5;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH5: FMOD_DSP_CHANNELMIX = 6;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH6: FMOD_DSP_CHANNELMIX = 7;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH7: FMOD_DSP_CHANNELMIX = 8;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH8: FMOD_DSP_CHANNELMIX = 9;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH9: FMOD_DSP_CHANNELMIX = 10;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH10: FMOD_DSP_CHANNELMIX = 11;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH11: FMOD_DSP_CHANNELMIX = 12;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH12: FMOD_DSP_CHANNELMIX = 13;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH13: FMOD_DSP_CHANNELMIX = 14;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH14: FMOD_DSP_CHANNELMIX = 15;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH15: FMOD_DSP_CHANNELMIX = 16;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH16: FMOD_DSP_CHANNELMIX = 17;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH17: FMOD_DSP_CHANNELMIX = 18;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH18: FMOD_DSP_CHANNELMIX = 19;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH19: FMOD_DSP_CHANNELMIX = 20;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH20: FMOD_DSP_CHANNELMIX = 21;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH21: FMOD_DSP_CHANNELMIX = 22;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH22: FMOD_DSP_CHANNELMIX = 23;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH23: FMOD_DSP_CHANNELMIX = 24;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH24: FMOD_DSP_CHANNELMIX = 25;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH25: FMOD_DSP_CHANNELMIX = 26;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH26: FMOD_DSP_CHANNELMIX = 27;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH27: FMOD_DSP_CHANNELMIX = 28;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH28: FMOD_DSP_CHANNELMIX = 29;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH29: FMOD_DSP_CHANNELMIX = 30;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH30: FMOD_DSP_CHANNELMIX = 31;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_GAIN_CH31: FMOD_DSP_CHANNELMIX = 32;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH0: FMOD_DSP_CHANNELMIX = 33;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH1: FMOD_DSP_CHANNELMIX = 34;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH2: FMOD_DSP_CHANNELMIX = 35;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH3: FMOD_DSP_CHANNELMIX = 36;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH4: FMOD_DSP_CHANNELMIX = 37;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH5: FMOD_DSP_CHANNELMIX = 38;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH6: FMOD_DSP_CHANNELMIX = 39;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH7: FMOD_DSP_CHANNELMIX = 40;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH8: FMOD_DSP_CHANNELMIX = 41;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH9: FMOD_DSP_CHANNELMIX = 42;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH10: FMOD_DSP_CHANNELMIX = 43;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH11: FMOD_DSP_CHANNELMIX = 44;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH12: FMOD_DSP_CHANNELMIX = 45;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH13: FMOD_DSP_CHANNELMIX = 46;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH14: FMOD_DSP_CHANNELMIX = 47;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH15: FMOD_DSP_CHANNELMIX = 48;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH16: FMOD_DSP_CHANNELMIX = 49;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH17: FMOD_DSP_CHANNELMIX = 50;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH18: FMOD_DSP_CHANNELMIX = 51;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH19: FMOD_DSP_CHANNELMIX = 52;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH20: FMOD_DSP_CHANNELMIX = 53;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH21: FMOD_DSP_CHANNELMIX = 54;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH22: FMOD_DSP_CHANNELMIX = 55;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH23: FMOD_DSP_CHANNELMIX = 56;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH24: FMOD_DSP_CHANNELMIX = 57;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH25: FMOD_DSP_CHANNELMIX = 58;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH26: FMOD_DSP_CHANNELMIX = 59;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH27: FMOD_DSP_CHANNELMIX = 60;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH28: FMOD_DSP_CHANNELMIX = 61;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH29: FMOD_DSP_CHANNELMIX = 62;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH30: FMOD_DSP_CHANNELMIX = 63;
pub const FMOD_DSP_CHANNELMIX_FMOD_DSP_CHANNELMIX_OUTPUT_CH31: FMOD_DSP_CHANNELMIX = 64;
pub type FMOD_DSP_CHANNELMIX = ::std::os::raw::c_int;
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO:
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE = -1;
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO:
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE = 0;
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO:
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE = 1;
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND:
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE = 2;
pub type FMOD_DSP_TRANSCEIVER_SPEAKERMODE = ::std::os::raw::c_int;
pub const FMOD_DSP_TRANSCEIVER_FMOD_DSP_TRANSCEIVER_TRANSMIT: FMOD_DSP_TRANSCEIVER = 0;
pub const FMOD_DSP_TRANSCEIVER_FMOD_DSP_TRANSCEIVER_GAIN: FMOD_DSP_TRANSCEIVER = 1;
pub const FMOD_DSP_TRANSCEIVER_FMOD_DSP_TRANSCEIVER_CHANNEL: FMOD_DSP_TRANSCEIVER = 2;
pub const FMOD_DSP_TRANSCEIVER_FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE: FMOD_DSP_TRANSCEIVER = 3;
pub type FMOD_DSP_TRANSCEIVER = ::std::os::raw::c_int;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_POSITION: FMOD_DSP_OBJECTPAN = 0;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_ROLLOFF: FMOD_DSP_OBJECTPAN = 1;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE: FMOD_DSP_OBJECTPAN = 2;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE: FMOD_DSP_OBJECTPAN = 3;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE: FMOD_DSP_OBJECTPAN = 4;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE: FMOD_DSP_OBJECTPAN = 5;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT: FMOD_DSP_OBJECTPAN = 6;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_OVERALL_GAIN: FMOD_DSP_OBJECTPAN = 7;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_OUTPUTGAIN: FMOD_DSP_OBJECTPAN = 8;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_ATTENUATION_RANGE: FMOD_DSP_OBJECTPAN = 9;
pub const FMOD_DSP_OBJECTPAN_FMOD_DSP_OBJECTPAN_OVERRIDE_RANGE: FMOD_DSP_OBJECTPAN = 10;
pub type FMOD_DSP_OBJECTPAN = ::std::os::raw::c_int;
pub const FMOD_DSP_PROCESS_OPERATION_FMOD_DSP_PROCESS_PERFORM: FMOD_DSP_PROCESS_OPERATION = 0;
pub const FMOD_DSP_PROCESS_OPERATION_FMOD_DSP_PROCESS_QUERY: FMOD_DSP_PROCESS_OPERATION = 1;
pub type FMOD_DSP_PROCESS_OPERATION = ::std::os::raw::c_int;
pub const FMOD_DSP_PAN_SURROUND_FLAGS_FMOD_DSP_PAN_SURROUND_DEFAULT: FMOD_DSP_PAN_SURROUND_FLAGS =
    0;
pub const FMOD_DSP_PAN_SURROUND_FLAGS_FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED:
    FMOD_DSP_PAN_SURROUND_FLAGS = 1;
pub const FMOD_DSP_PAN_SURROUND_FLAGS_FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT:
    FMOD_DSP_PAN_SURROUND_FLAGS = 65536;
pub type FMOD_DSP_PAN_SURROUND_FLAGS = ::std::os::raw::c_int;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_FLOAT: FMOD_DSP_PARAMETER_TYPE = 0;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_INT: FMOD_DSP_PARAMETER_TYPE = 1;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_BOOL: FMOD_DSP_PARAMETER_TYPE = 2;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_DATA: FMOD_DSP_PARAMETER_TYPE = 3;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_MAX: FMOD_DSP_PARAMETER_TYPE = 4;
pub const FMOD_DSP_PARAMETER_TYPE_FMOD_DSP_PARAMETER_TYPE_FORCEINT: FMOD_DSP_PARAMETER_TYPE = 65536;
pub type FMOD_DSP_PARAMETER_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR:
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = 0;
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO:
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = 1;
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR : FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = 2 ;
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT:
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = 65536;
pub type FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = ::std::os::raw::c_int;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_USER:
    FMOD_DSP_PARAMETER_DATA_TYPE = 0;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN:
    FMOD_DSP_PARAMETER_DATA_TYPE = -1;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES:
    FMOD_DSP_PARAMETER_DATA_TYPE = -2;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN:
    FMOD_DSP_PARAMETER_DATA_TYPE = -3;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_FFT:
    FMOD_DSP_PARAMETER_DATA_TYPE = -4;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI:
    FMOD_DSP_PARAMETER_DATA_TYPE = -5;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FMOD_DSP_PARAMETER_DATA_TYPE_ATTENUATION_RANGE:
    FMOD_DSP_PARAMETER_DATA_TYPE = -6;
pub type FMOD_DSP_PARAMETER_DATA_TYPE = ::std::os::raw::c_int;
pub type FMOD_DSP_CREATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RELEASE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RESET_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        inbuffer: *mut f32,
        outbuffer: *mut f32,
        length: ::std::os::raw::c_uint,
        inchannels: ::std::os::raw::c_int,
        outchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PROCESS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        length: ::std::os::raw::c_uint,
        inbufferarray: *const FMOD_DSP_BUFFER_ARRAY,
        outbufferarray: *mut FMOD_DSP_BUFFER_ARRAY,
        inputsidle: FMOD_BOOL,
        op: FMOD_DSP_PROCESS_OPERATION,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        pos: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SHOULDIPROCESS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        inputsidle: FMOD_BOOL,
        length: ::std::os::raw::c_uint,
        inmask: FMOD_CHANNELMASK,
        inchannels: ::std::os::raw::c_int,
        speakermode: FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_FLOAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_INT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_BOOL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: FMOD_BOOL,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_DATA_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_FLOAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut f32,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_INT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_BOOL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut FMOD_BOOL,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_DATA_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        data: *mut *mut ::std::os::raw::c_void,
        length: *mut ::std::os::raw::c_uint,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SYSTEM_REGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_MIX_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        stage: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_DSP_REALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_DSP_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ),
>;
pub type FMOD_DSP_LOG_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        level: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type FMOD_DSP_GETSAMPLERATE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        rate: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETBLOCKSIZE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        blocksize: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETSPEAKERMODE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        speakermode_mixer: *mut FMOD_SPEAKERMODE,
        speakermode_output: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETCLOCK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        clock: *mut ::std::os::raw::c_ulonglong,
        offset: *mut ::std::os::raw::c_uint,
        length: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETLISTENERATTRIBUTES_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        numlisteners: *mut ::std::os::raw::c_int,
        attributes: *mut FMOD_3D_ATTRIBUTES,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETUSERDATA_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_DFT_FFTREAL_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        size: ::std::os::raw::c_int,
        signal: *const f32,
        dft: *mut FMOD_COMPLEX,
        window: *const f32,
        signalhop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_DFT_IFFTREAL_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        size: ::std::os::raw::c_int,
        dft: *const FMOD_COMPLEX,
        signal: *mut f32,
        window: *const f32,
        signalhop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMMONOMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        pan: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        rotation: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
        flags: FMOD_DSP_PAN_SURROUND_FLAGS,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        rotation: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        rolloff: FMOD_DSP_PAN_3D_ROLLOFF_TYPE,
        distance: f32,
        mindistance: f32,
        maxdistance: f32,
        gain: *mut f32,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_BUFFER_ARRAY {
    pub numbuffers: ::std::os::raw::c_int,
    pub buffernumchannels: *mut ::std::os::raw::c_int,
    pub bufferchannelmask: *mut FMOD_CHANNELMASK,
    pub buffers: *mut *mut f32,
    pub speakermode: FMOD_SPEAKERMODE,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_BUFFER_ARRAY() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_BUFFER_ARRAY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_BUFFER_ARRAY>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_DSP_BUFFER_ARRAY))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_BUFFER_ARRAY>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_BUFFER_ARRAY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbuffers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(numbuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffernumchannels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(buffernumchannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferchannelmask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(bufferchannelmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speakermode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(speakermode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_COMPLEX {
    pub real: f32,
    pub imag: f32,
}
#[test]
fn bindgen_test_layout_FMOD_COMPLEX() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_COMPLEX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_COMPLEX>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_COMPLEX))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_COMPLEX>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_COMPLEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_COMPLEX),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_COMPLEX),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
    pub numpoints: ::std::os::raw::c_int,
    pub pointparamvalues: *mut f32,
    pub pointpositions: *mut f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numpoints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(numpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointparamvalues) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(pointparamvalues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointpositions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(pointpositions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING {
    pub type_: FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE,
    pub piecewiselinearmapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FLOAT_MAPPING() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_FLOAT_MAPPING> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).piecewiselinearmapping) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING),
            "::",
            stringify!(piecewiselinearmapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_FLOAT {
    pub min: f32,
    pub max: f32,
    pub defaultval: f32,
    pub mapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_FLOAT() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC_FLOAT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_FLOAT>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_FLOAT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapping) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(mapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_INT {
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub defaultval: ::std::os::raw::c_int,
    pub goestoinf: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_INT() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC_INT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_INT>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_INT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_INT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_INT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goestoinf) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(goestoinf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valuenames) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(valuenames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_BOOL {
    pub defaultval: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_BOOL() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC_BOOL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_BOOL>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_BOOL))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_BOOL>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_BOOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_BOOL),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valuenames) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_BOOL),
            "::",
            stringify!(valuenames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_DATA {
    pub datatype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC_DATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_DATA>(),
        4usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datatype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_DATA),
            "::",
            stringify!(datatype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC {
    pub type_: FMOD_DSP_PARAMETER_TYPE,
    pub name: [::std::os::raw::c_char; 16usize],
    pub label: [::std::os::raw::c_char; 16usize],
    pub description: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: FMOD_DSP_PARAMETER_DESC__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FMOD_DSP_PARAMETER_DESC__bindgen_ty_1 {
    pub floatdesc: FMOD_DSP_PARAMETER_DESC_FLOAT,
    pub intdesc: FMOD_DSP_PARAMETER_DESC_INT,
    pub booldesc: FMOD_DSP_PARAMETER_DESC_BOOL,
    pub datadesc: FMOD_DSP_PARAMETER_DESC_DATA,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatdesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(floatdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intdesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(intdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).booldesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(booldesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datadesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(datadesc)
        )
    );
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_DESC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_OVERALLGAIN {
    pub linear_gain: f32,
    pub linear_gain_additive: f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_OVERALLGAIN() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_OVERALLGAIN> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_OVERALLGAIN>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_OVERALLGAIN>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear_gain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN),
            "::",
            stringify!(linear_gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear_gain_additive) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN),
            "::",
            stringify!(linear_gain_additive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES {
    pub relative: FMOD_3D_ATTRIBUTES,
    pub absolute: FMOD_3D_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_3DATTRIBUTES() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_3DATTRIBUTES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES),
            "::",
            stringify!(absolute)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI {
    pub numlisteners: ::std::os::raw::c_int,
    pub relative: [FMOD_3D_ATTRIBUTES; 8usize],
    pub weight: [f32; 8usize],
    pub absolute: FMOD_3D_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>(),
        468usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numlisteners) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(numlisteners)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(absolute)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_ATTENUATION_RANGE {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_ATTENUATION_RANGE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_ATTENUATION_RANGE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_ATTENUATION_RANGE>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_ATTENUATION_RANGE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_ATTENUATION_RANGE>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_ATTENUATION_RANGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_ATTENUATION_RANGE),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_ATTENUATION_RANGE),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_SIDECHAIN {
    pub sidechainenable: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_SIDECHAIN() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_SIDECHAIN> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_SIDECHAIN>(),
        4usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_SIDECHAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_SIDECHAIN>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_SIDECHAIN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sidechainenable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_SIDECHAIN),
            "::",
            stringify!(sidechainenable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FFT {
    pub length: ::std::os::raw::c_int,
    pub numchannels: ::std::os::raw::c_int,
    pub spectrum: [*mut f32; 32usize],
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FFT() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETER_FFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FFT>(),
        264usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_FFT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FFT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_FFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numchannels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(numchannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spectrum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(spectrum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_DESCRIPTION {
    pub pluginsdkversion: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 32usize],
    pub version: ::std::os::raw::c_uint,
    pub numinputbuffers: ::std::os::raw::c_int,
    pub numoutputbuffers: ::std::os::raw::c_int,
    pub create: FMOD_DSP_CREATE_CALLBACK,
    pub release: FMOD_DSP_RELEASE_CALLBACK,
    pub reset: FMOD_DSP_RESET_CALLBACK,
    pub read: FMOD_DSP_READ_CALLBACK,
    pub process: FMOD_DSP_PROCESS_CALLBACK,
    pub setposition: FMOD_DSP_SETPOSITION_CALLBACK,
    pub numparameters: ::std::os::raw::c_int,
    pub paramdesc: *mut *mut FMOD_DSP_PARAMETER_DESC,
    pub setparameterfloat: FMOD_DSP_SETPARAM_FLOAT_CALLBACK,
    pub setparameterint: FMOD_DSP_SETPARAM_INT_CALLBACK,
    pub setparameterbool: FMOD_DSP_SETPARAM_BOOL_CALLBACK,
    pub setparameterdata: FMOD_DSP_SETPARAM_DATA_CALLBACK,
    pub getparameterfloat: FMOD_DSP_GETPARAM_FLOAT_CALLBACK,
    pub getparameterint: FMOD_DSP_GETPARAM_INT_CALLBACK,
    pub getparameterbool: FMOD_DSP_GETPARAM_BOOL_CALLBACK,
    pub getparameterdata: FMOD_DSP_GETPARAM_DATA_CALLBACK,
    pub shouldiprocess: FMOD_DSP_SHOULDIPROCESS_CALLBACK,
    pub userdata: *mut ::std::os::raw::c_void,
    pub sys_register: FMOD_DSP_SYSTEM_REGISTER_CALLBACK,
    pub sys_deregister: FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK,
    pub sys_mix: FMOD_DSP_SYSTEM_MIX_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_DESCRIPTION() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_DESCRIPTION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_DESCRIPTION>(),
        216usize,
        concat!("Size of: ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pluginsdkversion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(pluginsdkversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinputbuffers) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numinputbuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numoutputbuffers) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numoutputbuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setposition) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numparameters) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numparameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramdesc) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(paramdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setparameterfloat) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterfloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setparameterint) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setparameterbool) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterbool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setparameterdata) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getparameterfloat) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterfloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getparameterint) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getparameterbool) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterbool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getparameterdata) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shouldiprocess) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(shouldiprocess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_register) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_register)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_deregister) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_deregister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_mix) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_mix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_DFT_FUNCTIONS {
    pub fftreal: FMOD_DSP_DFT_FFTREAL_FUNC,
    pub inversefftreal: FMOD_DSP_DFT_IFFTREAL_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_DFT_FUNCTIONS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_STATE_DFT_FUNCTIONS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_DFT_FUNCTIONS>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_DFT_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fftreal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS),
            "::",
            stringify!(fftreal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inversefftreal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS),
            "::",
            stringify!(inversefftreal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_PAN_FUNCTIONS {
    pub summonomatrix: FMOD_DSP_PAN_SUMMONOMATRIX_FUNC,
    pub sumstereomatrix: FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC,
    pub sumsurroundmatrix: FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC,
    pub summonotosurroundmatrix: FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC,
    pub sumstereotosurroundmatrix: FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC,
    pub getrolloffgain: FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_PAN_FUNCTIONS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_STATE_PAN_FUNCTIONS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_PAN_FUNCTIONS>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_PAN_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summonomatrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(summonomatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sumstereomatrix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumstereomatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sumsurroundmatrix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumsurroundmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summonotosurroundmatrix) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(summonotosurroundmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sumstereotosurroundmatrix) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumstereotosurroundmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getrolloffgain) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(getrolloffgain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_FUNCTIONS {
    pub alloc: FMOD_DSP_ALLOC_FUNC,
    pub realloc: FMOD_DSP_REALLOC_FUNC,
    pub free: FMOD_DSP_FREE_FUNC,
    pub getsamplerate: FMOD_DSP_GETSAMPLERATE_FUNC,
    pub getblocksize: FMOD_DSP_GETBLOCKSIZE_FUNC,
    pub dft: *mut FMOD_DSP_STATE_DFT_FUNCTIONS,
    pub pan: *mut FMOD_DSP_STATE_PAN_FUNCTIONS,
    pub getspeakermode: FMOD_DSP_GETSPEAKERMODE_FUNC,
    pub getclock: FMOD_DSP_GETCLOCK_FUNC,
    pub getlistenerattributes: FMOD_DSP_GETLISTENERATTRIBUTES_FUNC,
    pub log: FMOD_DSP_LOG_FUNC,
    pub getuserdata: FMOD_DSP_GETUSERDATA_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_FUNCTIONS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_STATE_FUNCTIONS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_FUNCTIONS>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_FUNCTIONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getsamplerate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getsamplerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getblocksize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getblocksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dft) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(dft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pan) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(pan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getspeakermode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getspeakermode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getclock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getclock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getlistenerattributes) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getlistenerattributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getuserdata) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getuserdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE {
    pub instance: *mut ::std::os::raw::c_void,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub channelmask: FMOD_CHANNELMASK,
    pub source_speakermode: FMOD_SPEAKERMODE,
    pub sidechaindata: *mut f32,
    pub sidechainchannels: ::std::os::raw::c_int,
    pub functions: *mut FMOD_DSP_STATE_FUNCTIONS,
    pub systemobject: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugindata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelmask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(channelmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_speakermode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(source_speakermode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sidechaindata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(sidechaindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sidechainchannels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(sidechainchannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemobject) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(systemobject)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_METERING_INFO {
    pub numsamples: ::std::os::raw::c_int,
    pub peaklevel: [f32; 32usize],
    pub rmslevel: [f32; 32usize],
    pub numchannels: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_METERING_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_METERING_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_METERING_INFO>(),
        264usize,
        concat!("Size of: ", stringify!(FMOD_DSP_METERING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_METERING_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_METERING_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsamples) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(numsamples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peaklevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(peaklevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmslevel) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(rmslevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numchannels) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(numchannels)
        )
    );
}
pub type FMOD_OUTPUT_METHOD = ::std::os::raw::c_uint;
pub type FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        numdrivers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_GETDRIVERINFO_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
        systemrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_INIT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        selecteddriver: ::std::os::raw::c_int,
        flags: FMOD_INITFLAGS,
        outputrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
        outputformat: *mut FMOD_SOUND_FORMAT,
        dspbufferlength: ::std::os::raw::c_int,
        dspnumbuffers: *mut ::std::os::raw::c_int,
        dspnumadditionalbuffers: *mut ::std::os::raw::c_int,
        extradriverdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_START_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_STOP_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_CLOSE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_UPDATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_GETHANDLE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        handle: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_MIXER_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        maxhardwareobjects: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DFREE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut ::std::os::raw::c_void,
        info: *const FMOD_OUTPUT_OBJECT3DINFO,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OPENPORT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portType: FMOD_PORT_TYPE,
        portIndex: FMOD_PORT_INDEX,
        portId: *mut ::std::os::raw::c_int,
        portRate: *mut ::std::os::raw::c_int,
        portChannels: *mut ::std::os::raw::c_int,
        portFormat: *mut FMOD_SOUND_FORMAT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_CLOSEPORT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portId: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_READFROMMIXER_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        buffer: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_COPYPORT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portId: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_REQUESTRESET_FUNC = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_OUTPUT_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ),
>;
pub type FMOD_OUTPUT_LOG_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        level: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        ...
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_DESCRIPTION {
    pub apiversion: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub method: FMOD_OUTPUT_METHOD,
    pub getnumdrivers: FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK,
    pub getdriverinfo: FMOD_OUTPUT_GETDRIVERINFO_CALLBACK,
    pub init: FMOD_OUTPUT_INIT_CALLBACK,
    pub start: FMOD_OUTPUT_START_CALLBACK,
    pub stop: FMOD_OUTPUT_STOP_CALLBACK,
    pub close: FMOD_OUTPUT_CLOSE_CALLBACK,
    pub update: FMOD_OUTPUT_UPDATE_CALLBACK,
    pub gethandle: FMOD_OUTPUT_GETHANDLE_CALLBACK,
    pub mixer: FMOD_OUTPUT_MIXER_CALLBACK,
    pub object3dgetinfo: FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK,
    pub object3dalloc: FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK,
    pub object3dfree: FMOD_OUTPUT_OBJECT3DFREE_CALLBACK,
    pub object3dupdate: FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK,
    pub openport: FMOD_OUTPUT_OPENPORT_CALLBACK,
    pub closeport: FMOD_OUTPUT_CLOSEPORT_CALLBACK,
    pub devicelistchanged: FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_DESCRIPTION() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_OUTPUT_DESCRIPTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_DESCRIPTION>(),
        152usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_DESCRIPTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiversion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(apiversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getnumdrivers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(getnumdrivers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getdriverinfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(getdriverinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gethandle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(gethandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(mixer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object3dgetinfo) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dgetinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object3dalloc) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object3dfree) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object3dupdate) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dupdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openport) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(openport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closeport) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(closeport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devicelistchanged) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(devicelistchanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_STATE {
    pub plugindata: *mut ::std::os::raw::c_void,
    pub readfrommixer: FMOD_OUTPUT_READFROMMIXER_FUNC,
    pub alloc: FMOD_OUTPUT_ALLOC_FUNC,
    pub free: FMOD_OUTPUT_FREE_FUNC,
    pub log: FMOD_OUTPUT_LOG_FUNC,
    pub copyport: FMOD_OUTPUT_COPYPORT_FUNC,
    pub requestreset: FMOD_OUTPUT_REQUESTRESET_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_OUTPUT_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_STATE>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugindata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readfrommixer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(readfrommixer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyport) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(copyport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestreset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(requestreset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_OBJECT3DINFO {
    pub buffer: *mut f32,
    pub bufferlength: ::std::os::raw::c_uint,
    pub position: FMOD_VECTOR,
    pub gain: f32,
    pub spread: f32,
    pub priority: f32,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_OBJECT3DINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_OUTPUT_OBJECT3DINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_OBJECT3DINFO>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_OBJECT3DINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_OBJECT3DINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_OBJECT3DINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferlength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(bufferlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spread) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(spread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(priority)
        )
    );
}
